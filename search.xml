<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【SpringBoot学习笔记】快速搭建SpringBoot项目</title>
    <url>/2021/09/14/SpringBoot(1)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SpringBoot系列Demo代码，使用idea搭建SpringBoot简单项目</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="一、创建步骤"><a href="#一、创建步骤" class="headerlink" title="一、创建步骤"></a>一、创建步骤</h1><h2 id="1-创建SpringBoot项目，选择JDK版本"><a href="#1-创建SpringBoot项目，选择JDK版本" class="headerlink" title="1.创建SpringBoot项目，选择JDK版本"></a>1.创建SpringBoot项目，选择JDK版本</h2><p>点击New新建项目</p>
<p><img src="https://img-blog.csdnimg.cn/541b7bfb6f1147908061180e1c15a31b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>选择JDK版本<br><img src="https://img-blog.csdnimg.cn/96504db26f9f446496f2115bbbc14cc9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="2-填写包名和项目名"><a href="#2-填写包名和项目名" class="headerlink" title="2.填写包名和项目名"></a>2.填写包名和项目名</h2><p>一般包名规范为域名倒写 com.公司名.项目名.模块名*..<br>项目名全小写<br><img src="https://img-blog.csdnimg.cn/e0087b48010348c9ac9aa60cd9620bf8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="3-创建web项目"><a href="#3-创建web项目" class="headerlink" title="3.创建web项目"></a>3.创建web项目</h2><p>选择web，勾选Spring Web<br><img src="https://img-blog.csdnimg.cn/26c52ac2ae774fc295aa06c632ad09c1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="4-创建web项目"><a href="#4-创建web项目" class="headerlink" title="4.创建web项目"></a>4.创建web项目</h2><p>填写项目存储路径<br><img src="https://img-blog.csdnimg.cn/c0e166e879d64afcb1b0d08e2d43ba46.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h1 id="二、测试"><a href="#二、测试" class="headerlink" title="二、测试"></a>二、测试</h1><h2 id="1-配置maven"><a href="#1-配置maven" class="headerlink" title="1.配置maven"></a>1.配置maven</h2><p><img src="https://img-blog.csdnimg.cn/2de8346c18f8443bb7d08d4a38f97330.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="2-创建测试方法"><a href="#2-创建测试方法" class="headerlink" title="2.创建测试方法"></a>2.创建测试方法</h2><p><img src="https://img-blog.csdnimg.cn/e74930af07bd4363890b97e0d514e346.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>启动Application启动类，访问本地连接<a href="http://localhost:8080/hello/world">http://localhost:8080/hello/world</a><br><img src="https://img-blog.csdnimg.cn/88144c504784495a82c91e3652c19167.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated block green right larger" href="/2021/09/17/SpringBoot(2)/" 
  title="【SpringBoot学习笔记】—— 整合MyBatis-Plus"><i class="far fa-hand-point-right"></i><span>【SpringBoot学习笔记】—— 整合MyBatis-Plus</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/07/12/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>【SpringBoot学习笔记】简单多模块构建</title>
    <url>/2021/10/15/SpringBoot(10)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SpringBoot系列到现在虽然代码不多，但是感觉结构很乱，随着项目的复杂性提高，代码会越来越臃肿，耦合性高。</p>
<p>所以SpringBoot多模块很有必要，简单来说就是由以前按包分模块变为jar包分模块。在多模块jar模式下可以将某个jar拿出来对外共用，能大大提高代码复用率与开发效率。（后续SpringCloud就是将jar升级成war或者多个集合jar，也就是常说的微服务。）</p>
<h1 id="一、模块划分"><a href="#一、模块划分" class="headerlink" title="一、模块划分"></a>一、模块划分</h1><h2 id="1-整体流程"><a href="#1-整体流程" class="headerlink" title="1.整体流程"></a>1.整体流程</h2><p>（1）新建springboot项目；<br>（2）在新建后的springboot项目中新建多个module；<br>（3）修改pom文件以及删除多余的文件及文件夹；<br>（4）将原项目的代码放进去；</p>
<h2 id="2-新建springboot项目"><a href="#2-新建springboot项目" class="headerlink" title="2. 新建springboot项目"></a>2. 新建springboot项目</h2><p>通过Spring Initializr新建一个普通的spring boot项目（<a href="/2021/09/14/SpringBoot(1)">快速搭建springboot项目</a>）<br><img src="https://img-blog.csdnimg.cn/d5ed7572b27a4022b8666fdcf94b7fe0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="3-新建Module"><a href="#3-新建Module" class="headerlink" title="3. 新建Module"></a>3. 新建Module</h2><p>右击项目，选择新建Module<br><img src="https://img-blog.csdnimg.cn/b7816af5a31349a4bf81d40840f1966f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>新建springboot-common、springboot-dao、springboot-service、springboot-api模块(每个子模块的groupId要建议一样)<br><img src="https://img-blog.csdnimg.cn/9fcec06e9c2348daba315a6f5997c025.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>全部建好之后，效果如下：<br><img src="https://img-blog.csdnimg.cn/f6a0ee3ab4da49c48c0806a18207638b.png"></p>
<h2 id="4-删除多余的文件"><a href="#4-删除多余的文件" class="headerlink" title="4. 删除多余的文件"></a>4. 删除多余的文件</h2><p>1.springboot项目<br>父模块springboot-parent中将src文件和多余的文件删除；</p>
<p>2.module模块<br>将springboot-service和springboot-dao下面的application启动类和对应配置文件application.yml，一起删除了，springboot-api模块的不动。</p>
<h2 id="4-修改pom文件"><a href="#4-修改pom文件" class="headerlink" title="4. 修改pom文件"></a>4. 修改pom文件</h2><p>1.修改父模块pom.xml：<code>将打包方式改为pom</code>、<code>新建modules标签</code><br>父模块pom.xm用于加载一些全局的或者公共的jar包，以及配置打包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--打包方式改为pom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springboot-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springboot-dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springboot-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springboot-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子模块继承父模块依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jdk15<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.修改api模块中的pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖其他子模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Swagger UI API接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- swagger-bootstrap-ui--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其他模块都继承父模块，这里需要注意：<strong>由于我们把其他模块的启动类删了，父模块的spring-boot-maven-plugin插件也需要删掉</strong>，然后添加到需要的模块中去，因为springboot这个插件必须要启动类，否则则会出现错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failed to execute goal org.springframework.boot:</span><br><span class="line">spring-boot-maven-plugin:2.5.5:repackage (repackage) on project springboot-common: </span><br><span class="line">Execution repackage of goal org.springframework.boot:spring-boot-maven-</span><br><span class="line">plugin:2.5.5:repackage failed: Unable to find main class</span><br></pre></td></tr></table></figure>
<p>3.其他模块修改类似，springboot-dao模块存放数据库相关处理逻辑，需要加入mybatis依赖<br>springboot-dao模块pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-dao<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖其他子模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--添加MyBatis-Plus依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-修改application-yml"><a href="#5-修改application-yml" class="headerlink" title="5. 修改application.yml"></a>5. 修改application.yml</h2><p>所有的xml配置和yml配置只能放在最外层的模块，application.yml只能放在springboot-api模块下</p>
<p>将以前的代码修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#内置Tomcat容器配置</span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">  servlet:</span><br><span class="line">    #应用路径，配置应用路径，可方便进行反向代理</span><br><span class="line">    context-path:</span><br><span class="line">spring:</span><br><span class="line">  # 数据源</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/local_develop?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">  #profiles:</span><br><span class="line">    #active: @spring.profiles.active@</span><br><span class="line">  #i18n国际化路径</span><br><span class="line">#  messages:</span><br><span class="line">#    basename: i18n/messages</span><br><span class="line">  # 邮件</span><br><span class="line">  mail:</span><br><span class="line">    default-encoding: utf-8</span><br><span class="line">    # 配置 SMTP 服务器地址</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    #发送方邮件名</span><br><span class="line">    username: 158111920@qq.com</span><br><span class="line">    #授权码</span><br><span class="line">    password: btdbkkdkrnxqbijh</span><br><span class="line">    # thymeleaf模板格式</span><br><span class="line">    thymeleaf:</span><br><span class="line">      cache: false</span><br><span class="line">      encoding: UTF-8</span><br><span class="line">      mode: HTML</span><br><span class="line">      servlet:</span><br><span class="line">        content-type: text/html</span><br><span class="line">      prefix: classpath:/templates/</span><br><span class="line">      suffix: .html</span><br><span class="line">  # aop</span><br><span class="line">  aop:</span><br><span class="line">    auto: true</span><br><span class="line">    proxy-target-class: true</span><br><span class="line">#日志</span><br><span class="line">logging:</span><br><span class="line">  config: classpath:logback-spring.xml</span><br><span class="line">#mybatis-plus</span><br><span class="line">mybatis-plus:</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      #主键策略</span><br><span class="line">      id-type: auto</span><br><span class="line">      field-strategy: not_empty</span><br><span class="line">      #驼峰下划线转换</span><br><span class="line">      column-underline: true</span><br><span class="line">      #逻辑删除配置</span><br><span class="line">      logic-delete-value: 0</span><br><span class="line">      logic-not-delete-value: 1</span><br><span class="line">      db-type: mysql</span><br><span class="line">      #声明全局默认类名的对应的表的前缀</span><br><span class="line">      table-prefix: t_</span><br><span class="line">    refresh: false</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    cache-enabled: false</span><br><span class="line">    #打印出sql语句</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line"># # mapper-locations: classpath*:com/local/springboot/springbootdao/mapper/**/*Mapper.xml</span><br><span class="line">#  mapper-locations: classpath*:com/local/springboot/springbootdao/mapper/**/*Mapper.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>SpringbootApiApplication.java启动类修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.springboot.springbootapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;com.local.springboot&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.local.springboot.*.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApiApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SpringApplication.run(SpringbootApiApplication.class, args);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="6-代码搬家"><a href="#6-代码搬家" class="headerlink" title="6. 代码搬家"></a>6. 代码搬家</h2><p>将以前的代码搬运过来（不完整），大致结构如下：<br><img src="https://img-blog.csdnimg.cn/8128874527064c7aa4fa4aba839e45f5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_17,color_FFFFFF,t_70,g_se,x_16"></p>
<h1 id="二、测试"><a href="#二、测试" class="headerlink" title="二、测试"></a>二、测试</h1><p><img src="https://img-blog.csdnimg.cn/f50276c4a0494464a684de021c7bf0d5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>启动程序，浏览器输入<code>http://localhost:8080/user/list?pageNumber=1&amp;pageSize=10</code><br><img src="https://img-blog.csdnimg.cn/34df67aac13940d699d97bd5a22b98f6.png"></p>
<p>SpringBoot-简单多模块构建就到这里，还有很多没完善的地方，以后慢慢完善。</p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/10/08/SpringBoot(9)/" 
  title="Filter过滤器的使用"><i class="far fa-hand-point-left"></i><span>Filter过滤器的使用</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot学习笔记】整合MyBatis-Plus</title>
    <url>/2021/09/17/SpringBoot(2)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SpringBoot系列Demo代码，使用 SpringBoot 快速整合 MyBatis-Plus</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="一、MyBatis-Plus简介"><a href="#一、MyBatis-Plus简介" class="headerlink" title="一、MyBatis-Plus简介"></a>一、MyBatis-Plus简介</h1><p>MyBatis-Plus 是一个 Mybatis 增强版工具（简称MP），在 MyBatis 上扩充了其他功能没有改变其基本功能，为了简化开发提交效率而存在。</p>
<p>官网地址：<a href="https://baomidou.com/">https://baomidou.com/</a></p>
<h1 id="二、整合MyBatis-Plus"><a href="#二、整合MyBatis-Plus" class="headerlink" title="二、整合MyBatis-Plus"></a>二、整合MyBatis-Plus</h1><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><p>创建一个 SpringBoot 项目：<a href="https://blog.csdn.net/qq_34383510/article/details/120288104">https://blog.csdn.net/qq_34383510/article/details/120288104</a></p>
<h2 id="2-添加pom引用"><a href="#2-添加pom引用" class="headerlink" title="2.添加pom引用"></a>2.添加pom引用</h2><p>在pom.xml文件中添加MyBatis-Plus依赖和mysql 相关依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加MyBatis-Plus依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h2><p>在 application.yml 文件中配置 mysql 数据源信息和MyBatis-Plus相关配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mysql</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/local_develop?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">#mybatis-plus</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment">#主键策略</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">field-strategy:</span> <span class="string">not_empty</span></span><br><span class="line">      <span class="comment">#驼峰下划线转换</span></span><br><span class="line">      <span class="attr">column-underline:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#逻辑删除配置</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">db-type:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="comment">#声明全局默认类名的对应的表的前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br><span class="line">    <span class="attr">refresh:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#打印出sql语句</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<p>表名和实体类名要对应，可以采用全局配置<code>table-prefix: t_</code>，也可以在实体类上加上<code>@TableName(&quot;表名&quot;)</code></p>
<h1 id="三、简单示例"><a href="#三、简单示例" class="headerlink" title="三、简单示例"></a>三、简单示例</h1><h2 id="1-代码示例"><a href="#1-代码示例" class="headerlink" title="1.代码示例"></a>1.代码示例</h2><p>（1）配置分页插件<br>编写一个 配置类，内部使用 @Bean 注解将 PaginationInterceptor 交给 Spring 容器管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>idea提示PaginationInterceptor被弃用,尽管不影响使用,但总感觉不舒服。<br>所以又换成了如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public PaginationInterceptor paginationInterceptor() &#123;</span></span><br><span class="line"><span class="comment">//        return new PaginationInterceptor();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,</span></span><br><span class="line"><span class="comment">     * 需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration -&gt; configuration.setUseDeprecatedExecutor(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）编写代码<br>Mapper继承BaseMapper ，Service继承IService，其中的方法能实现大部分功能。<br><img src="https://img-blog.csdnimg.cn/10e764b1e34c4e4f9d3c15c1256e92cc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_16,color_FFFFFF,t_70,g_se,x_16"></p>
<p>SysUserMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">SysUser</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SysUserService.java，在Service自定义两个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">SysUser</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过手机号或openId查询用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SysUser <span class="title">getByPhoneOrOpenId</span><span class="params">(String param)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询分页列表数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Page&lt;SysUser&gt; <span class="title">selectPage</span><span class="params">(JSONObject params)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SysUserServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SysUserMapper</span>, <span class="title">SysUser</span>&gt; <span class="keyword">implements</span> <span class="title">SysUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">getByPhoneOrOpenId</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数设置</span></span><br><span class="line">        LambdaQueryWrapper&lt;SysUser&gt; wrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(SysUser::getPhone, param);</span><br><span class="line">        wrapper.or();</span><br><span class="line">        wrapper.eq(SysUser::getOpenId, param);</span><br><span class="line">        <span class="comment">// 查询用户信息</span></span><br><span class="line">        SysUser user = baseMapper.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;SysUser&gt; <span class="title">selectPage</span><span class="params">(JSONObject params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数设置</span></span><br><span class="line">        LambdaQueryWrapper&lt;SysUser&gt; wrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 逻辑存在</span></span><br><span class="line">        wrapper.eq(SysUser::getLogicDel, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模糊查询条件</span></span><br><span class="line">        <span class="keyword">if</span> (params.containsKey(<span class="string">&quot;phone&quot;</span>) &amp;&amp; StringUtils.isNotBlank(params.getString(<span class="string">&quot;phone&quot;</span>))) &#123;</span><br><span class="line">            wrapper.like(SysUser::getPhone, params.get(<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (params.containsKey(<span class="string">&quot;userName&quot;</span>) &amp;&amp; StringUtils.isNotBlank(params.getString(<span class="string">&quot;userName&quot;</span>))) &#123;</span><br><span class="line">            wrapper.like(SysUser::getPhone, params.get(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前页</span></span><br><span class="line">        <span class="keyword">int</span> pageNumber = params.getIntValue(<span class="string">&quot;pageNumber&quot;</span>);</span><br><span class="line">        <span class="comment">// 每页条数</span></span><br><span class="line">        <span class="keyword">int</span> pageSize = params.getIntValue(<span class="string">&quot;pageSize&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个Page对象</span></span><br><span class="line">        Page page = <span class="keyword">new</span> Page(pageNumber, pageSize);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectPage(page, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SysUserController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/getUserByCondition&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">getUserByCondition</span><span class="params">(<span class="meta">@RequestBody</span> String jsonStr)</span> </span>&#123;</span><br><span class="line">        JSONObject object = JSON.parseObject(jsonStr);</span><br><span class="line">        String param = object.getString(<span class="string">&quot;param&quot;</span>);</span><br><span class="line">        SysUser user = sysUserService.getByPhoneOrOpenId(param);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">list</span><span class="params">(<span class="meta">@RequestBody</span> String jsonStr)</span> </span>&#123;</span><br><span class="line">        JSONObject object = JSON.parseObject(jsonStr);</span><br><span class="line">        Page page = sysUserService.selectPage(object);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok(page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-测试结果"><a href="#2-测试结果" class="headerlink" title="2.测试结果"></a>2.测试结果</h2><p><a href="http://localhost:8080/user/list">http://localhost:8080/user/list</a><br><img src="https://img-blog.csdnimg.cn/0dbad2b22bcf46ed8ece83958ed974b7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/fd86e3577be445c5931e57e2ce52be22.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><a href="https://blog.csdn.net/qq_34383510/article/details/120353138?spm=1001.2014.3001.5501">添加链接描述</a></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是今天要讲的内容，本文仅仅简单介绍了MyBatis-Plus的使用，而MyBatis-Plus提供了大量能使我们快速便捷地处理数据的函数和方法。</p>
<p>其中MyBatis-Plus也提供了代码生成器（与mybatis 中的 mybatis-generator-core 类似），参考<a href="https://baomidou.com/guide/generator.html">https://baomidou.com/guide/generator.html</a></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/09/14/SpringBoot(1)/" 
  title="快速搭建SpringBoot项目"><i class="far fa-hand-point-left"></i><span>快速搭建SpringBoot项目</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/09/17/SpringBoot(3)/" 
  title="API实时接口文档Swagger UI、Swagger-Bootstrap-UI"><i class="far fa-hand-point-right"></i><span>API实时接口文档Swagger UI、Swagger-Bootstrap-UI</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Zuul问题解决：NoSuchMethodError：xx..ErrorController.getErrorPath</title>
    <url>/2021/11/24/ProblemSolved(1)/</url>
    <content><![CDATA[<p>在使用zuul的过程中，启动应用程序，调用接口时报错：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">java.lang.NoSuchMethodError: org.springframework.boot.web.servlet.error.ErrorController.getErrorPath()Ljava/lang/String;</span><br><span class="line">	at org.springframework.cloud.netflix.zuul.web.ZuulHandlerMapping.lookupHandler(ZuulHandlerMapping.java:87) ~[spring-cloud-netflix-zuul-2.2.7.RELEASE.jar:2.2.7.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.getHandlerInternal(AbstractUrlHandlerMapping.java:152) ~[spring-webmvc-5.3.10.jar:5.3.10]</span><br><span class="line">	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:498) ~[spring-webmvc-5.3.10.jar:5.3.10]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1261) ~[spring-webmvc-5.3.10.jar:5.3.10]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1043) ~[spring-webmvc-5.3.10.jar:5.3.10]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963) ~[spring-webmvc-5.3.10.jar:5.3.10]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.3.10.jar:5.3.10]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.3.10.jar:5.3.10]</span><br><span class="line">	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655) ~[tomcat-embed-core-9.0.53.jar:4.0.FR]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.3.10.jar:5.3.10]</span><br><span class="line">	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764) ~[tomcat-embed-core-9.0.53.jar:4.0.FR]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227) ~[tomcat-embed-core-9.0.53.jar:9.0.53]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>找不到ErrorController中的getErrorPath()方法</strong></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/9c332f0330db48058505e153c87b45da.png"><br><img src="https://img-blog.csdnimg.cn/947f832f3cc245f0a4964ddd2e105f50.png"></p>
<p>由于作者使用的是最新的 spring-boot 2.5.5 版本，从 ErrorController 中删除了 getErrorPath() API，但spring-cloud-starter-netflix-zuul 2.2.7.RELEASE 仍然调用此 API 并导致此错误。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>方法一：</strong> 使用低版本spring boot兼容spring-cloud-starter-netflix-zuul</p>
<p> 使用spring boot 2.4.8可以兼容spring-cloud-starter-netflix-zuul</p>
<p><strong>补充：</strong><br>spring-cloud 和 netflix-zuul 将在以下版本中正常工作：</p>
<blockquote>
<p>spring-boot-starter-parent: 2.1.3.RELEASE<br>java.version: 1.8<br>spring-cloud.version: Greenwich.RELEASE<br>spring-cloud-starter-netflix-zuul: 2.1.0.RELEASE<br>spring-cloud-starter-netflix-eureka-client: 2.1.0.RELEASE<br>jackson-dataformat-xml: 2.9.9<br>spring-cloud-starter-netflix-eureka-server: 2.1.0.RELEASE</p>
</blockquote>
<p><strong>方法二：</strong> 创建BeanPostProcessor拦截 <strong>lookupHandler</strong> 方法的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.ErrorController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Callback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.CallbackFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.NoOp;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.web.ZuulController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.web.ZuulHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fix for Zuul configuration with Spring Boot 2.5.x + Zuul - &quot;NoSuchMethodError: ErrorController.getErrorPath()&quot;:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The path returned by ErrorController.getErrorPath() with Spring Boot &lt; 2.5</span></span><br><span class="line"><span class="comment">   * (and no longer available on Spring Boot &gt;= 2.5).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ERROR_PATH = <span class="string">&quot;/error&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD = <span class="string">&quot;lookupHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs a new bean post-processor for Zuul.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> routeLocator    the route locator.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> zuulController  the Zuul controller.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> errorController the error controller.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the new bean post-processor.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ZuulPostProcessor <span class="title">zuulPostProcessor</span><span class="params">(<span class="meta">@Autowired</span> RouteLocator routeLocator,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="meta">@Autowired</span> ZuulController zuulController,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="meta">@Autowired(required = false)</span> ErrorController errorController)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ZuulPostProcessor(routeLocator, zuulController, errorController);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">LookupHandlerCallbackFilter</span> <span class="keyword">implements</span> <span class="title">CallbackFilter</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">accept</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (METHOD.equals(method.getName())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">LookupHandlerMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object target, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (ERROR_PATH.equals(args[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="comment">// by entering this branch we avoid the ZuulHandlerMapping.lookupHandler method to trigger the </span></span><br><span class="line">        <span class="comment">// NoSuchMethodError </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> methodProxy.invokeSuper(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RouteLocator routeLocator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ZuulController zuulController;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> hasErrorController;</span><br><span class="line"></span><br><span class="line">    ZuulPostProcessor(RouteLocator routeLocator, ZuulController zuulController, ErrorController errorController) &#123;</span><br><span class="line">      <span class="keyword">this</span>.routeLocator = routeLocator;</span><br><span class="line">      <span class="keyword">this</span>.zuulController = zuulController;</span><br><span class="line">      <span class="keyword">this</span>.hasErrorController = (errorController != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (hasErrorController &amp;&amp; (bean <span class="keyword">instanceof</span> ZuulHandlerMapping)) &#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(ZuulHandlerMapping.class);</span><br><span class="line">        enhancer.setCallbackFilter(LookupHandlerCallbackFilter.INSTANCE); <span class="comment">// only for lookupHandler</span></span><br><span class="line">        enhancer.setCallbacks(<span class="keyword">new</span> Callback[] &#123;LookupHandlerMethodInterceptor.INSTANCE, NoOp.INSTANCE&#125;);</span><br><span class="line">        Constructor&lt;?&gt; ctor = ZuulHandlerMapping.class.getConstructors()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> enhancer.create(ctor.getParameterTypes(), <span class="keyword">new</span> Object[] &#123;routeLocator, zuulController&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/set&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行成功，不报错：<br><img src="https://img-blog.csdnimg.cn/c5005b5fabc744fcbb35cefe17d093ef.png"></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
]]></content>
      <categories>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>问题记录</tag>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot学习笔记】API实时接口文档Swagger UI、Swagger-Bootstrap-UI</title>
    <url>/2021/09/17/SpringBoot(3)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SpringBoot系列Demo代码，使用 Swagger UI实现对API接口文档的管理。 </p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="一、Swagger-UI是什么？"><a href="#一、Swagger-UI是什么？" class="headerlink" title="一、Swagger UI是什么？"></a>一、Swagger UI是什么？</h1><p>Swagger UI是可视化实时API文档，按照规范写好接口代码后，直接实时查看、测试API，无需再单独编写API文档，省时省力,支持在线导入描述文件和本地部署UI项目。</p>
<p>Swagger UI官网：<a href="https://swagger.io/tools/swagger-ui/">https://swagger.io/tools/swagger-ui/</a></p>
<h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Swagger UI API接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-编写配置类"><a href="#2-编写配置类" class="headerlink" title="2.编写配置类"></a>2.编写配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaoDeShu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021-09-17 16:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Swagger UI 配置信息</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加摘要信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// API基础扫描路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.local.dev.root.devroot.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;SpringBootDemo-API实时接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;用于管理、查看、测试API&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;MaoDeShu&quot;</span>, <span class="string">&quot;https://blog.csdn.net/qq_34383510&quot;</span>, <span class="string">&quot;1474538220@qq.com&quot;</span>))</span><br><span class="line">                .version(<span class="string">&quot;version 1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-修改接口信息"><a href="#3-修改接口信息" class="headerlink" title="3.修改接口信息"></a>3.修改接口信息</h2><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;用户管理相关接口&quot;, tags = &quot;用户管理相关接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;查询用户信息&quot;, notes = &quot;根据手机号或openId查询用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;param&quot;, required = true, value = &quot;手机号或openId&quot;),</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/getUserByCondition&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">getUserByCondition</span><span class="params">(<span class="meta">@RequestParam</span> String param)</span> </span>&#123;</span><br><span class="line">        SysUser user = sysUserService.getByPhoneOrOpenId(param);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取用户列表&quot;, notes = &quot;分页查询所有用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;pageNumber&quot;, required = true, value = &quot;当前页&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;pageSize&quot;, required = true, value = &quot;页容量&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;keyword&quot;, required = false, value = &quot;关键字查询&quot;),</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">list</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String keyword,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="meta">@RequestParam</span> Integer pageNumber,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="meta">@RequestParam</span> Integer pageSize)</span> </span>&#123;</span><br><span class="line">        Page page = sysUserService.selectPage(pageNumber, pageSize, keyword);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok(page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果有实体类做参数，需要在类和属性上加上<code>@ApiModel(description = &quot;User实体Vo&quot;)</code> <code>@ApiModelProperty(&quot;用户名称&quot;)</code></p>
<h1 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h1><h2 id="1-查看API文档"><a href="#1-查看API文档" class="headerlink" title="1.查看API文档"></a>1.查看API文档</h2><p>浏览器地址输入<code>http://localhost:8080/swagger-ui.html#/</code></p>
<p><img src="https://img-blog.csdnimg.cn/7a9036666a2249088a02cbd4c05c2260.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>可以看到接口，打开用户管理接口，进行测试<br><img src="https://img-blog.csdnimg.cn/973378ddc6ab4ac799dd361ec54ae748.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>得到结果如下图：<br><img src="https://img-blog.csdnimg.cn/3395763efb754a5689aaf2e018f386fc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="2-测试中出现的问题"><a href="#2-测试中出现的问题" class="headerlink" title="2.测试中出现的问题"></a>2.测试中出现的问题</h2><p>第一次测试时，出现：<code>MissingServletRequestParameterException: Required request parameter &#39;keyword&#39; for method parameter type String is not present]</code><br><img src="https://img-blog.csdnimg.cn/9e65cca23eea455da94df4329fd09d94.png"><br><img src="https://img-blog.csdnimg.cn/c7239f761a62446b8061314b96ded274.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>可以看到时参数的问题，查看代码<br><img src="https://img-blog.csdnimg.cn/528dbd1fcf9248069a74b2defa460900.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>发现keyword不是必须的，所以加上<code>@RequestParam(required = false) String keyword</code>，成功解决问题。</p>
<h1 id="四、集成Swagger-Bootstrap-UI"><a href="#四、集成Swagger-Bootstrap-UI" class="headerlink" title="四、集成Swagger-Bootstrap-UI"></a>四、集成Swagger-Bootstrap-UI</h1><h2 id="1-添加Maven依赖"><a href="#1-添加Maven依赖" class="headerlink" title="1.添加Maven依赖"></a>1.添加Maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger-bootstrap-ui--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>文档：<a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a><br>开源项目地址：<a href="https://github.com/xiaoymin/Swagger-Bootstrap-UI">https://github.com/xiaoymin/Swagger-Bootstrap-UI</a></p>
<h2 id="2-启动项目"><a href="#2-启动项目" class="headerlink" title="2.启动项目"></a>2.启动项目</h2><p>启动项目，然后访问地址:<code>http://localhost:8080/doc.html</code>即可<br><img src="https://img-blog.csdnimg.cn/4095727b2e464874b8d964a7a4175565.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>测试接口，效果图如下:<br><img src="https://img-blog.csdnimg.cn/f0a0e880e1304524981c5d23214cbbbb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/09/17/SpringBoot(2)/" 
  title="整合 MyBatis-Plus"><i class="far fa-hand-point-left"></i><span>整合 MyBatis-Plus</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/09/18/SpringBoot(4)/" 
  title="整合Logback，输出日志到文件"><i class="far fa-hand-point-right"></i><span>整合Logback，输出日志到文件</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot学习笔记】整合Logback，输出日志到文件</title>
    <url>/2021/09/18/SpringBoot(4)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SpringBoot系列Demo代码，整合logback，设置输出日志。</p>
<h1 id="一、logback日志组件"><a href="#一、logback日志组件" class="headerlink" title="一、logback日志组件"></a>一、logback日志组件</h1><p>logback是一款开源日志组件，属于Log4j的升级版本，现在项目组使用的次数越来越多。</p>
<h2 id="1-日志等级"><a href="#1-日志等级" class="headerlink" title="1.日志等级"></a>1.日志等级</h2><p>日志级别有（从高到低）：FATAL（致命），ERROR（错误），WARN（警告），INFO（信息），DEBUG（调试），TRACE（跟踪）或者 OFF（关闭），默认的日志配置在消息写入时将消息回显到控制台。默认情况下，将记录错误级别、警告级别和信息级别的消息。</p>
<h2 id="2-打印日志"><a href="#2-打印日志" class="headerlink" title="2.打印日志"></a>2.打印日志</h2><p>通过Class的方式初始化</p>
<p>private final static Logger LOGGER = LoggerFactory.getLogger(HelloLogback.class);</p>
<h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><h2 id="1-简单配置"><a href="#1-简单配置" class="headerlink" title="1.简单配置"></a>1.简单配置</h2><p>如果不需要进行复杂的日志配置，则在配置文件中进行简单的日志配置即可（默认情况下，SpringBoot日志只记录到控制台，不写日志文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#日志配置</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    #日志级别 root表示所有包，也可以单独配置具体包 fatal error warn info debug trace off</span><br><span class="line">    root: info</span><br><span class="line">  file:</span><br><span class="line">    path: /local/log/dev</span><br><span class="line">    name: app.log</span><br></pre></td></tr></table></figure>
<h2 id="2-扩展配置"><a href="#2-扩展配置" class="headerlink" title="2.扩展配置"></a>2.扩展配置</h2><p>如果需要比较复杂的配置，建议使用扩展配置的方式，SpringBoot推荐我们使用带-spring后缀的 logback-spring.xml 扩展配置，因为默认的的logback.xml标准配置，Spring无法完全控制日志初始化。（spring扩展对springProfile节点的支持）</p>
<p>logback-spring.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan：程序运行时配置文件被修改，是否重新加载。true=重新加载；false=不重新加载；默认为true; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod：监测配置文件被修改的时间间隔，scan属性必须设置为true才可生效；默认为1分钟，默认单位是毫秒； --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- debug：是否打印logback程序运行的日志信息。true=打印；false=不打印；默认为false; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志文件主目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/local/log/dev&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志格式--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %X[%thread] %-5level %logger&#123;50&#125; %line - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志文件名称 spring.application.name表示工程名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;app&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;springProperty scope=&quot;context&quot; name=&quot;APP_NAME&quot; source=&quot;spring.application.name&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &amp;lt;!&amp;ndash;默认配置&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &amp;lt;!&amp;ndash;配置控制台(Console)&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置磁盘文件滚动输出日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件路径：这里%d&#123;yyyyMMdd&#125;表示按天分类日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/%d&#123;yyyyMMdd&#125;/$&#123;APP_NAME&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置日志保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置最大日志大小--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>14KB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置日志输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志文件只记录 【debug / info / warn / error】 级别的--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;level&gt;【debug / info / warn / error】&lt;/level&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/filter&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制台输出日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置日志输出格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置输出字符集编码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;root level=&quot;INFO&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref=&quot;FILE&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        　　　　　　　&amp;lt;!&amp;ndash;为了直观，在控制天中也输出info级别的日志&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/root&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 把日志异步输出到磁盘文件中，避免每次都进行磁盘IO操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ASYNC-FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discardingThreshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">discardingThreshold</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>256<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--多环境配置 按照active profile选择分支--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--root节点 全局日志级别，用来指定最基础的日志输出级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ASYNC-FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 子节点向上级传递 局部日志级别--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;logger level=&quot;WARN&quot; name=&quot;org.springframework&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;logger level=&quot;WARN&quot; name=&quot;com.netflix&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;logger level=&quot;DEBUG&quot; name=&quot;org.hibernate.SQL&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--生产环境,可以不需要再控制台输出日志--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>springProfile节点设置，application.yml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure>
<h2 id="3-代码测试"><a href="#3-代码测试" class="headerlink" title="3.代码测试"></a>3.代码测试</h2><p><img src="https://img-blog.csdnimg.cn/fe28e5e4a3a647caafe110c2368aaf66.png"></p>
<p><img src="https://img-blog.csdnimg.cn/c6055ac8ca894b0e885fcd38cff7ead7.png"><br><img src="https://img-blog.csdnimg.cn/0d8bdc82d6bb4d99abba9bec1c8bac3f.png"><br>启动项目，调用接口，查看日志文件输出<br><img src="https://img-blog.csdnimg.cn/714d2b8abc784a71ba06fd99fc8aca6c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/3625743a2481482299662232c604f240.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h1 id="三、启动过程的错位"><a href="#三、启动过程的错位" class="headerlink" title="三、启动过程的错位"></a>三、启动过程的错位</h1><p>在项目启动时，出现如下错误：<br><img src="https://img-blog.csdnimg.cn/ca6c18eafdd14cdabc8255cee9edca60.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>发现时MaxFileSize出现错误，排查后发现是配置文件中错误：<br><img src="https://img-blog.csdnimg.cn/87db1a6c6f8f4777b67d30a74ed0dfc4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/872ef25ae6eb4d918d65779fbae5e716.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>TimeBasedRollingPolicy中并没有MaxFileSize属性，于是修改为SizeAndTimeBasedRollingPolicy<br><img src="https://img-blog.csdnimg.cn/760a06feed0e4809910f4bbaada32fc2.png"><br>启动正常，问题成功解决。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是今天要讲的内容，本文仅仅简单介绍了日志根据时间和大小输出到文件的实现，后续还会完善。</p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/09/17/SpringBoot(3)/" 
  title="API实时接口文档Swagger UI、Swagger-Bootstrap-UI"><i class="far fa-hand-point-left"></i><span>API实时接口文档Swagger UI、Swagger-Bootstrap-UI</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/09/22/SpringBoot(5)/" 
  title="实现邮件、短信的发送功能"><i class="far fa-hand-point-right"></i><span>实现邮件、短信的发送功能</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot学习笔记】实现邮件、短信的发送功能</title>
    <url>/2021/09/22/SpringBoot(5)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>SpringBoot系列Demo代码，实现邮件和短信的发送。</p>
<h1 id="一、开启服务"><a href="#一、开启服务" class="headerlink" title="一、开启服务"></a>一、开启服务</h1><h2 id="1-POP3和SMTP协议"><a href="#1-POP3和SMTP协议" class="headerlink" title="1.POP3和SMTP协议"></a>1.POP3和SMTP协议</h2><p>Spring框架为使用JavaMailSender接口发送电子邮件提供了一个简单的抽象，Spring Boot为它提供了自动配置以及启动模块。</p>
<p>在使用Spring Boot发送邮件之前，要开启POP3和SMTP协议，需要获得邮件服务器的授权码</p>
<p><strong>SMTP 协议</strong>全称为 Simple Mail Transfer Protocol，译作简单邮件传输协议，它定义了邮件客户端软件与 SMTP 服务器之间，以及 SMTP 服务器与 SMTP 服务器之间的通信规则。</p>
<p><strong>POP3 协议</strong>全称为 Post Office Protocol ，译作邮局协议，它定义了邮件客户端与 POP3 服务器之间的通信规则</p>
<h2 id="2-获取授权码"><a href="#2-获取授权码" class="headerlink" title="2.获取授权码"></a>2.获取授权码</h2><p>以QQ邮箱为例：<br><img src="https://img-blog.csdnimg.cn/2c9b4be0de584af0b8a30ad99b657911.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>开启服务之后，会获得一个授权码：<code>成功开启POP3/SMTP服务,在第三方客户端登录时，密码框请输入以下授权码：</code></p>
<h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h2><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springboot 邮件mail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.yml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  # 数据源</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/local_develop?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">  profiles:</span><br><span class="line">    active: @spring.profiles.active@</span><br><span class="line">  # 邮件</span><br><span class="line">  mail:</span><br><span class="line">    default-encoding: utf-8</span><br><span class="line">    # 配置 SMTP 服务器地址</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    #发送方邮件名</span><br><span class="line">    username: </span><br><span class="line">    #授权码</span><br><span class="line">    password: </span><br><span class="line">    # thymeleaf模板格式</span><br><span class="line">    thymeleaf:</span><br><span class="line">      cache: false</span><br><span class="line">      encoding: UTF-8</span><br><span class="line">      mode: HTML</span><br><span class="line">      servlet:</span><br><span class="line">        content-type: text/html</span><br><span class="line">      prefix: classpath:/templates/</span><br><span class="line">      suffix: .html</span><br></pre></td></tr></table></figure>

<h2 id="2-代码编写"><a href="#2-代码编写" class="headerlink" title="2.代码编写"></a>2.代码编写</h2><p>SendMail.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMail</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(SendMail.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sendFrom;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送简单邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendTo  接收人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text    邮件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">(String sendTo, String subject, String text)</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        message.setFrom(sendFrom);</span><br><span class="line">        message.setTo(sendTo);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(text);</span><br><span class="line"></span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送HTML格式的邮件，并可以添加附件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendTo  接收人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 邮件内容（html）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> files   附件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">(String sendTo, String subject, String content, List&lt;File&gt; files)</span> </span>&#123;</span><br><span class="line">        MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">// true表示需要创建一个multipart message</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">            helper.setFrom(sendFrom);</span><br><span class="line">            helper.setTo(sendTo);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加附件</span></span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                helper.addAttachment(file.getName(), <span class="keyword">new</span> FileSystemResource(file));</span><br><span class="line">            &#125;</span><br><span class="line">            mailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            LOGGER.warn(<span class="string">&quot;邮件发送出错：&#123;&#125;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SendMailController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;邮件发送接口&quot;, tags = &quot;邮件发送接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SendMail sendMail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;发送简单邮件&quot;, notes = &quot;发送简单邮件&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;sendTo&quot;, required = true, value = &quot;接收人&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;subject&quot;, required = false, value = &quot;邮件主题&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;text&quot;, required = false, value = &quot;邮件内容&quot;),</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendSimpleMail&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">sendSimpleMail</span><span class="params">(<span class="meta">@RequestParam</span> String sendTo,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@RequestParam(required = false)</span> String subject,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@RequestParam(required = false)</span> String text)</span> </span>&#123;</span><br><span class="line">        sendMail.sendSimpleMail(sendTo, subject, text);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;发送HTML格式的邮件&quot;, notes = &quot;使用Thymeleaf模板发送邮件&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;sendTo&quot;, required = true, value = &quot;接收人&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;subject&quot;, required = false, value = &quot;邮件主题&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;content&quot;, required = true, value = &quot;邮件模板&quot;),</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendHtmlMail&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">sendHtmlMail</span><span class="params">(<span class="meta">@RequestParam</span> String sendTo,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@RequestParam(required = false)</span> String subject,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="meta">@RequestParam</span> String content)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        context.setVariable(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        context.setVariable(<span class="string">&quot;num&quot;</span>, <span class="string">&quot;007&quot;</span>);</span><br><span class="line">        <span class="comment">// 模板</span></span><br><span class="line">        String template = <span class="string">&quot;mail/&quot;</span> + content;</span><br><span class="line">        List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        sendMail.sendHtmlMail(sendTo, subject, templateEngine.process(template, context), files);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mail.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello 欢迎加入 荣华富贵 大家庭，您的入职信息如下：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>工号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;num&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: #ff1a0e&quot;</span>&gt;</span>加油加油<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: #ff1a0e&quot;</span>&gt;</span>努力努力！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: #ff1a0e&quot;</span>&gt;</span>今天睡地板，明天当老板！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-邮件发送测试"><a href="#3-邮件发送测试" class="headerlink" title="3.邮件发送测试"></a>3.邮件发送测试</h2><p>启动项目，打开<code>http://localhost:8080/doc.html</code><br><img src="https://img-blog.csdnimg.cn/3335ef447b1b472b8cfa644c490eedca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>调试接口，效果如下：<br><img src="https://img-blog.csdnimg.cn/94e55fff95054e4d90ed08dc3cabe504.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/a89b718e8fb04ec7bf915fba56d6bb15.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="4-短信发送"><a href="#4-短信发送" class="headerlink" title="4.短信发送"></a>4.短信发送</h2><p>短信发送通过调用API实现，具体参考：<a href="https://blog.csdn.net/qq_34383510/article/details/115939788?spm=1001.2014.3001.5501">https://blog.csdn.net/qq_34383510/article/details/115939788</a></p>
<p>本文参考：<a href="http://springboot.javaboy.org/2019/0717/springboot-mail">http://springboot.javaboy.org/2019/0717/springboot-mail</a></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/09/18/SpringBoot(4)/" 
  title="整合Logback，输出日志到文件"><i class="far fa-hand-point-left"></i><span>整合Logback，输出日志到文件</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/09/24/SpringBoot(6)/" 
  title="多线程定时任务的实现（注解配置、task:annotation-driven配置）"><i class="far fa-hand-point-right"></i><span>多线程定时任务的实现（注解配置、task:annotation-driven配置）</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot学习笔记】多线程定时任务的实现</title>
    <url>/2021/09/24/SpringBoot(6)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目常常用到定时任务，在某个特定的时间，程序会自主触发去执行一些机械重复的工作，例如定时发送邮件、定时释放数据库资源、定时票据核销等。</p>
<h1 id="一、cron表达式"><a href="#一、cron表达式" class="headerlink" title="一、cron表达式"></a>一、cron表达式</h1><p>  <a href="https://baike.baidu.com/item/cron/10952601?fr=aladdin">了解cron表达式</a></p>
<p>对于cron表达式，其结构是: 从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份</p>
<h1 id="二、注解配置"><a href="#二、注解配置" class="headerlink" title="二、注解配置"></a>二、注解配置</h1><h2 id="1-Scheduled"><a href="#1-Scheduled" class="headerlink" title="1.Scheduled"></a>1.Scheduled</h2><p>1.@Scheduled(cron = “0 10 * * * ?”)<br>cron表达式就不多说了</p>
<p>2.@Scheduled(fixedDelay = 10000)<br>fixedDelay 的执行规则是上一个任务结束后到下个任务开始的间隔时间为设定时间，单位是毫秒（例：@Scheduled(fixedDelay = 10000)代表间隔10秒执行一次）</p>
<p>3.@Scheduled(fixedRate= 10000)<br>fixedRate表示上个任务开始到下个任务开始之间的间隔时间，单位也是毫秒。</p>
<p>4.@Scheduled(initialDelay= 10000)<br>这个代表第一次运行前延迟一段时间后执行，单位也是毫秒</p>
<h2 id="2-使用注解实现定时任务"><a href="#2-使用注解实现定时任务" class="headerlink" title="2.使用注解实现定时任务"></a>2.使用注解实现定时任务</h2><p>首先，启动类上加上<code>@EnableScheduling</code></p>
<p>新建定时任务测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/1 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;task1:每1秒执行一次 &quot;</span> +</span><br><span class="line">                <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;task2:每2秒执行一次 &quot;</span> +</span><br><span class="line">                    <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行程序：<br><img src="https://img-blog.csdnimg.cn/49c75a75e601455da2a1621103b109ba.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br>当有多个方法使用@Scheduled注解时，就会创建多个定时任务到任务列表中，当其中一个任务没执行完时，其它任务在阻塞队列当中等待，因此，所有的任务都是按照顺序执行的。</p>
<p>这时需要用到<code>@Async</code>实现多线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/1 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;task1:每1秒执行一次 &quot;</span> +</span><br><span class="line">                <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;task2:每2秒执行一次 &quot;</span> +</span><br><span class="line">                    <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://img-blog.csdnimg.cn/7b4c588dae3b4dc18393e953603afc80.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h1 id="三、xml配置实现"><a href="#三、xml配置实现" class="headerlink" title="三、xml配置实现"></a>三、xml配置实现</h1><h2 id="1-线程池配置"><a href="#1-线程池配置" class="headerlink" title="1.线程池配置"></a>1.线程池配置</h2><p>新建springmvc-servlet.xml进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 线程池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskExecutor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 核心线程数 --&gt;</span>	 </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;corePoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 最大线程数 --&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 队列最大长度 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;queueCapacity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 线程池维护线程所允许的空闲时间，默认为60s --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;keepAliveSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-任务配置"><a href="#2-任务配置" class="headerlink" title="2.任务配置"></a>2.任务配置</h2><p>spring中使用task:annotation-driven标签作为定时器的启动开关，自动扫描程序中带注解的定时器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 任务调度器线程数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">&quot;scheduler&quot;</span> <span class="attr">pool-size</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">scheduler</span>=<span class="string">&quot;scheduler&quot;</span> <span class="attr">executor</span>=<span class="string">&quot;taskExecutor&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:scheduled-tasks</span> <span class="attr">scheduler</span>=<span class="string">&quot;scheduler&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">&quot;taskDemo&quot;</span> <span class="attr">method</span>=<span class="string">&quot;task1&quot;</span> <span class="attr">cron</span>=<span class="string">&quot;*/1 * * * * ?&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">&quot;taskDemo&quot;</span> <span class="attr">method</span>=<span class="string">&quot;task2&quot;</span> <span class="attr">cron</span>=<span class="string">&quot;*/2 * * * * ?&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">task:scheduled-tasks</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-引入外部xml"><a href="#3-引入外部xml" class="headerlink" title="3.引入外部xml"></a>3.引入外部xml</h2><p>贴出完整的xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">&quot;http://www.springframework.org/schema/task&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/task/spring-task-4.1.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context/spring-context-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.local.dev.root.devroot.common.task&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;taskDemo&quot; class=&quot;com.local.dev.root.devroot.common.task.TaskDemo&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 线程池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskExecutor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 核心线程数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;corePoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大线程数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 队列最大长度 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;queueCapacity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 线程池维护线程所允许的空闲时间，默认为60s --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;keepAliveSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置任务线性池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 任务执行器线程数量 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;task:executor id=&quot;executor&quot; pool-size=&quot;3&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 任务调度器线程数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">&quot;scheduler&quot;</span> <span class="attr">pool-size</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">scheduler</span>=<span class="string">&quot;scheduler&quot;</span> <span class="attr">executor</span>=<span class="string">&quot;taskExecutor&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduled-tasks</span> <span class="attr">scheduler</span>=<span class="string">&quot;scheduler&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">&quot;taskDemo&quot;</span> <span class="attr">method</span>=<span class="string">&quot;task1&quot;</span> <span class="attr">cron</span>=<span class="string">&quot;*/1 * * * * ?&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">&quot;taskDemo&quot;</span> <span class="attr">method</span>=<span class="string">&quot;task2&quot;</span> <span class="attr">cron</span>=<span class="string">&quot;*/2 * * * * ?&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">task:scheduled-tasks</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在启动类加上<code>@ImportResource(&quot;classpath:spring-servlet.xml&quot;)</code></p>
<p>执行程序：<br><img src="https://img-blog.csdnimg.cn/4ec4580758524820ab15534925462083.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是今天要讲的内容，本文仅仅简单介绍了定时器的使用，注解实现很简单，但是项目中推荐使用xml配置的方式。</p>
<a class="btn-beautify button--animated red larger" href="/2021/05/27/task/" 
  title="配置参考"><i class="far fa-hand-point-right"></i><span>配置参考</span></a>

<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/09/22/SpringBoot(5)/" 
  title="实现邮件、短信的发送功能"><i class="far fa-hand-point-left"></i><span>实现邮件、短信的发送功能</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/09/26/SpringBoot(7)/" 
  title="统一异常处理"><i class="far fa-hand-point-right"></i><span>统一异常处理</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot学习笔记】Filter过滤器的使用</title>
    <url>/2021/10/08/SpringBoot(9)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>过滤器是Javaweb非常基础的一个概念，属于Servlet的一部分。本文记录一下在SpringBoot项目中是如何使用Filter过滤器。</p>
<h1 id="一、过滤器是什么？"><a href="#一、过滤器是什么？" class="headerlink" title="一、过滤器是什么？"></a>一、过滤器是什么？</h1><p>过滤器是<a href="https://baike.baidu.com/item/AOP/1332219?fr=aladdin">AOP（面向切面编程）思想</a>的具体实现。可以过滤浏览器发出的请求，并且决定放行请求还是中断请求。</p>
<p><strong>机制简述</strong>：<br>在浏览器对服务器<strong>发起请求</strong>或者服务器对浏览器<strong>响应</strong>，都会经过过滤器。</p>
<p>基于过滤器的机制，我们可以在过滤器中对请求和响应做一些处理，可以在过滤器中决定是否放行，例如：校验请求中有没有敏感字符串，校验有没有Session，实现URL级别的权限控制、压缩响应信息、编码格式等。</p>
<h1 id="二、过滤器的实现"><a href="#二、过滤器的实现" class="headerlink" title="二、过滤器的实现"></a>二、过滤器的实现</h1><h2 id="1-使用-WebFilter注解"><a href="#1-使用-WebFilter注解" class="headerlink" title="1.使用@WebFilter注解"></a>1.使用@WebFilter注解</h2><p>Filter的执行由Servlet容器回调完成，因此我们不需要再额外引包。</p>
<p>下面列举一个登录场景：即用户需登录后才能访问<br>新建MyFilter类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;myFilter&quot;, urlPatterns = &#123;&quot;/user/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;过滤器初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求处理&quot;</span>);</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter, URL：&#123;&#125;&quot;</span>, request.getRequestURI());</span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;非法URL：&#123;&#125;&quot;</span>, request.getRequestURI());</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);</span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            writer.print(<span class="string">&quot;no access&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;过滤器销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-启动类注解"><a href="#2-启动类注解" class="headerlink" title="2.启动类注解"></a>2.启动类注解</h2><p>用@WebFilter注解，指定拦截路径以及一些参数，同时需要在启动类使用@<strong>ServletComponentScan</strong>扫描带@WebFilter、@WebServlet、@WebListener并将帮我们注入bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevRootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DevRootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>输入请求：<a href="http://localhost:8080/hello/error1">http://localhost:8080/hello/error1</a><br><img src="https://img-blog.csdnimg.cn/24e5005ea7f74b9c8c3e81fe8ef7fa79.png"><br>没有拦截请求，因为我们设置的拦截请求为 **/user/***，带user的请求才会被拦截处理。</p>
<p>输入请求：<a href="http://localhost:8080/user/getUserByCondition">http://localhost:8080/user/getUserByCondition</a><br><img src="https://img-blog.csdnimg.cn/f8d98a6471bc49b7ac49298eeb9694c0.png"><br>日志：<br><img src="https://img-blog.csdnimg.cn/4376afb47a8648a790bf1580b17fb604.png"><br>过滤器使用成功。这里只是简单演示，实际的登录处理大部分情况通过token配合过滤器来实现。</p>
<p><strong>补充：设置多个过滤器的执行顺序</strong><br>当你有多个过滤器之后，就需要规定各个过滤器的指定顺序了。</p>
<p>使用@Order()注解<br><img src="https://img-blog.csdnimg.cn/fe4bc52d38ac470585a964e68dfaaddb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>以上就是SpringBoot中过滤器的简单使用。</p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/09/30/SpringBoot(8)/" 
  title="简单整合Redis实例"><i class="far fa-hand-point-left"></i><span>简单整合Redis实例</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/10/15/SpringBoot(10)/" 
  title="简单多模块构建"><i class="far fa-hand-point-right"></i><span>简单多模块构建</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot学习笔记】统一异常处理</title>
    <url>/2021/09/26/SpringBoot(7)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 Controller 里提供接口，通常需要捕捉异常，进行异常处理。最简单的方法使用try/catch进行异常捕捉。</p>
<p>当方法很多，每个都需要 try catch，代码会显得臃肿，写起来也比较麻烦。<br>这时就需要进行统一的异常处理。</p>
<h2 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1.使用方法"></a>1.使用方法</h2><p>通过 Spring 的 AOP 特性就可以很方便的实现异常的统一处理：使用@ControllerAdvice、@RestControllerAdvice捕获运行时异常。</p>
<p>代码结构<br><img src="https://img-blog.csdnimg.cn/7aacc4fdb1524d5e844b530ae3c8791d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_19,color_FFFFFF,t_70,g_se,x_16"><br>新建异常枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.dev.root.devroot.common.enums;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常枚举类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ExceptionEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 400</span></span><br><span class="line">    BAD_REQUEST(<span class="string">&quot;400&quot;</span>, <span class="string">&quot;请求数据格式不正确!&quot;</span>),</span><br><span class="line">    UNAUTHORIZED(<span class="string">&quot;401&quot;</span>, <span class="string">&quot;登录凭证过期!&quot;</span>),</span><br><span class="line">    FORBIDDEN(<span class="string">&quot;403&quot;</span>, <span class="string">&quot;没有访问权限!&quot;</span>),</span><br><span class="line">    NOT_FOUND(<span class="string">&quot;404&quot;</span>, <span class="string">&quot;请求的资源找不到!&quot;</span>),</span><br><span class="line">    <span class="comment">// 500</span></span><br><span class="line">    INTERNAL_SERVER_ERROR(<span class="string">&quot;500&quot;</span>, <span class="string">&quot;服务器内部错误!&quot;</span>),</span><br><span class="line">    SERVICE_UNAVAILABLE(<span class="string">&quot;503&quot;</span>, <span class="string">&quot;服务器正忙，请稍后再试!&quot;</span>),</span><br><span class="line">    <span class="comment">// 未知异常</span></span><br><span class="line">    UNKNOWN(<span class="string">&quot;10000&quot;</span>, <span class="string">&quot;未知异常!&quot;</span>),</span><br><span class="line">    <span class="comment">// 自定义</span></span><br><span class="line">    IS_NOT_NULL(<span class="string">&quot;10001&quot;</span>,<span class="string">&quot;%s不能为空&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ExceptionEnum(String code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义异常类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.dev.root.devroot.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.common.enums.ExceptionEnum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义业务异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExceptionEnum exceptionEnum;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(ExceptionEnum exceptionEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;&#123;code:&quot;</span> + exceptionEnum.getCode() + <span class="string">&quot;,errorMsg:&quot;</span> + exceptionEnum.getMsg() + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.exceptionEnum = exceptionEnum;</span><br><span class="line">        <span class="keyword">this</span>.code = exceptionEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.errorMsg = exceptionEnum.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String code, String errorMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;&#123;code:&quot;</span> + code + <span class="string">&quot;,errorMsg:&quot;</span> + errorMsg + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.errorMsg = errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String code, String errorMsg, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;&#123;code:&quot;</span> + code + <span class="string">&quot;,errorMsg:&quot;</span> + String.format(errorMsg, args) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.errorMsg = String.format(errorMsg, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExceptionEnum <span class="title">getExceptionEnum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exceptionEnum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorMsg</span><span class="params">(String errorMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorMsg = errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ExceptionHandlerConfig.java<br> <strong>@RestControllerAdvice，统一异常处理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.dev.root.devroot.common.config.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.common.enums.ExceptionEnum;</span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.common.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.common.exception.ErrorPageException;</span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.common.pojo.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.common.util.ErrorUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RestControllerAdvice，统一异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandlerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 业务异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = BusinessException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">exceptionHandler</span><span class="params">(BusinessException e)</span> </span>&#123;</span><br><span class="line">        log.error(ErrorUtil.errorInfoToString(e));</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(e.getCode(), e.getErrorMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未知异常处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">exceptionHandler</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 把错误信息输入到日志中</span></span><br><span class="line">        log.error(ErrorUtil.errorInfoToString(e));</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ExceptionEnum.UNKNOWN.getCode(),</span><br><span class="line">                ExceptionEnum.UNKNOWN.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误页面异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = ErrorPageException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">exceptionHandler</span><span class="params">(ErrorPageException e)</span> </span>&#123;</span><br><span class="line">        log.error(ErrorUtil.errorInfoToString(e));</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(e.getCode(), e.getErrorMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空指针异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = NullPointerException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">exceptionHandler</span><span class="params">(NullPointerException e)</span> </span>&#123;</span><br><span class="line">        log.error(ErrorUtil.errorInfoToString(e));</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.error(ExceptionEnum.INTERNAL_SERVER_ERROR.getCode(),</span><br><span class="line">                ExceptionEnum.INTERNAL_SERVER_ERROR.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.dev.root.devroot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.common.pojo.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.service.dev.TestServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestServiceImpl testServiceImpl;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;world&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;error1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">Error1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;error2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">Error2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String msg = <span class="keyword">null</span>;</span><br><span class="line">        msg.equals(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok(<span class="string">&quot;访问成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;error3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">Error3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        testServiceImpl.getBusinessException();</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok(<span class="string">&quot;访问成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>testServiceImpl 抛出自定义异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.dev.root.devroot.service.dev;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.common.enums.ExceptionEnum;</span><br><span class="line"><span class="keyword">import</span> com.local.dev.root.devroot.common.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBusinessException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(ExceptionEnum.IS_NOT_NULL.getCode(),</span><br><span class="line">                ExceptionEnum.IS_NOT_NULL.getMsg(), <span class="string">&quot;参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h2><p>正常<br><a href="http://localhost:8080/hello/error1">http://localhost:8080/hello/error1</a><br><img src="https://img-blog.csdnimg.cn/72b143a0ed774e98a758c749e2166fde.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>空指针异常<br><a href="http://localhost:8080/hello/error2">http://localhost:8080/hello/error2</a><br><img src="https://img-blog.csdnimg.cn/68b6d40a69aa461a8734585435c6453b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>业务异常<br><a href="http://localhost:8080/hello/error3">http://localhost:8080/hello/error3</a><br><img src="https://img-blog.csdnimg.cn/60c24e88f1ea47a8b6f9b1cc73b7487f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="3-查看日志"><a href="#3-查看日志" class="headerlink" title="3.查看日志"></a>3.查看日志</h2><p><img src="https://img-blog.csdnimg.cn/12f84a46570349fa911d9d1d5e050879.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>打开error日志<br><img src="https://img-blog.csdnimg.cn/461e6eaac5d5481a85c6bee3f8e23363.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/09/24/SpringBoot(6)/" 
  title="多线程定时任务的实现"><i class="far fa-hand-point-left"></i><span>多线程定时任务的实现</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/09/30/SpringBoot(8)/" 
  title="简单整合Redis实例"><i class="far fa-hand-point-right"></i><span>简单整合Redis实例</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringCloud入门】Eureka服务注册与发现</title>
    <url>/2021/10/18/SpringCloud(1)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面简单说了SpringBoot的模块划分，现在简单搭建一个分布式项目，首先整合Eureka Server服务注册，用于管理分布式环境下的各个Spring Boot微服务。</p>
<h1 id="一、Eureka是什么？"><a href="#一、Eureka是什么？" class="headerlink" title="一、Eureka是什么？"></a>一、Eureka是什么？</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Eureka是Netflix开发的服务发现框架，本身是一个基于REST(具像状态传输)的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。</p>
<p>简单来说，Eureka就是一个注册服务中心，负责管理、记录服务提供者的信息，服务调用者无需自己寻找服务，而是把自己的需求告诉Eureka，然后Eureka会把符合你需求的服务告诉你。</p>
<h2 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2.基本概念"></a>2.基本概念</h2><p>Eureka由多个instance(服务实例)组成，分为<strong>Eureka Server</strong>和<strong>Eureka Client</strong>，Eureka Client包括两个服务模块<strong>Service Provider</strong>（服务提供方）和<strong>Service Consumer</strong>（服务消费方）。</p>
<ul>
<li>Eureka Server 提供服务注册和发现</li>
<li>Service Provider 服务提供方，将自身服务注册到Eureka，从而使服务消费方能够找到</li>
<li>Service Consumer服务消费方，从Eureka获取注册服务列表，从而能够消费服务</li>
</ul>

<p>从下图很好理解Eureka的工作流程：<br><img src="https://img-blog.csdnimg.cn/925c38a0d1964cfcbf7ca3834cac2c7c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left"></p>
<h1 id="二、代码示例"><a href="#二、代码示例" class="headerlink" title="二、代码示例"></a>二、代码示例</h1><h2 id="1-部署Eureka-Server"><a href="#1-部署Eureka-Server" class="headerlink" title="1.部署Eureka Server"></a>1.部署Eureka Server</h2><p>代码目录结构直接沿用之前springboot，稍作修改（<a href="/2021/10/15/SpringBoot(10)">新建模块参考</a>）</p>
<p>模块eureka-server<br><img src="https://img-blog.csdnimg.cn/71563dc1d34d44d08bae959a364a3a76.png"><br>1.pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot.eureka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>eureka 注册中心<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--spring boot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring boot maven插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>父模块中统一管理版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2020.0.2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意SpringBoot 和 SpringCloud 的版本对应，参考<a href="https://spring.io/projects/spring-cloud">官网</a><br><img src="https://img-blog.csdnimg.cn/9ae69fccd3214ea18e6fcbbe6506f0e6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>2.配置文件有两种:  .properties和 .yml 两种文件，可以任务选一种，这里使用properties文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server.port=8080</span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line">eureka.client.register-with-eureka=false</span><br><span class="line">eureka.client.fetch-registry=false</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure>
<p>3.启动类<br>通过@EnableEurekaServer来标识该服务为Eureka Server。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动程序，访问<a href="http://localhost:8080/">http://localhost:8080/</a><br><img src="https://img-blog.csdnimg.cn/e9bf2d254e2240ebba41ef4325cd6141.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>注册中心启动成功，可以看到此时并没有服务</p>
<h2 id="2-部署Eureka-Client"><a href="#2-部署Eureka-Client" class="headerlink" title="2.部署Eureka Client"></a>2.部署Eureka Client</h2><p>Eureka Client和Eureka Server目录类似，不同的是：</p>
<ul>
<li>启动类，使用@EnableDiscoveryClient 标识该服务为Euraka Client</li>
<li>Euraka Client配置文件，需要指定Euraka Server地址和当前服务注册时的名称。</li>
</ul>

<h3 id="2-1部署-Servcie-Provider"><a href="#2-1部署-Servcie-Provider" class="headerlink" title="2.1部署 Servcie Provider"></a>2.1部署 Servcie Provider</h3><p>1.pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>client-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>client-provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.local.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server.port=8081</span><br><span class="line">#服务名</span><br><span class="line">spring.application.name=client-provider-server</span><br><span class="line">#Euraka Server地址</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/</span><br></pre></td></tr></table></figure>
<p>3.启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ClientProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.springboot.client.clientprovider.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/provider&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是服务提供者&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>启动服务，成功在注册中心注册成功，可以对外提供服务。<br><img src="https://img-blog.csdnimg.cn/317a9884f3dd4c00bb84733de65f5e18.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h3 id="2-2部署-Servcie-Customer"><a href="#2-2部署-Servcie-Customer" class="headerlink" title="2.2部署  Servcie Customer"></a>2.2部署  Servcie Customer</h3><p>工程目录和Servie Provider一样的。这里就不多写了<br>Service Customer只是从Eureka Serve中获取注册服务的地址信息</p>
<p>通过RestTemplate来实现对CLIENT-PROVIDER-SERVER服务提供的/provider 接口调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.springboot.client.clientcustomer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;client-provider-server&quot;</span>);</span><br><span class="line">        StringBuilder urls = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">//        for (ServiceInstance instance : instances) &#123;</span></span><br><span class="line"><span class="comment">//            urls.append(instance.getHost() + &quot;:&quot; + instance.getPort()).append(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">// 没有集群，只有一个</span></span><br><span class="line">        ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 使用restTemplate发起请求</span></span><br><span class="line">        String result = restTemplate.getForEntity(<span class="string">&quot;http://CLIENT-PROVIDER-SERVER/provider&quot;</span>, String.class).getBody();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryService&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;client-provider-server&quot;</span>);</span><br><span class="line">        StringBuilder urls = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            urls.append(instance.getHost() + <span class="string">&quot;:&quot;</span> + instance.getPort()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> urls.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：这里访问的地址是服务名：CLIENT-PROVIDER-SERVER，而不是一个IP地址。</strong></p>
<p>通过访问<a href="http://localhost:8082/query%E5%8F%91%E8%B5%B7GET%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%88%90%E5%8A%9F%E8%BF%94%E5%9B%9E%E4%BF%A1%E6%81%AF">http://localhost:8082/query发起GET请求，成功返回信息</a><br><img src="https://img-blog.csdnimg.cn/3f9caf2fd5394f2babee62c26e67dea2.png"></p>
<h1 id="三、Eureka部署服务"><a href="#三、Eureka部署服务" class="headerlink" title="三、Eureka部署服务"></a>三、Eureka部署服务</h1><h2 id="1-健康检查——自我保护机制"><a href="#1-健康检查——自我保护机制" class="headerlink" title="1.健康检查——自我保护机制"></a>1.健康检查——自我保护机制</h2><p>1、自我保护模式<br>保护模式，是Eureka 提供的一个特性，在默认的情况下，这个属性是打开的，而且也建议线上都使用这个特性。</p>
<p>如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，此时会触发Eureka Server进入保护模式，进入自我保护模式后，将会保护服务注册表中的信息，不再删除服务注册表中的数据。</p>
<p>比如，现在将CLIENT-PROVIDER-SERVER服务停掉，Eureka Client进入了保护模式，就会出现下图警告信息，但实例依旧显示为UP<br><img src="https://img-blog.csdnimg.cn/0b922434d04e4604a6b35ed3cf7afc3c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>4、相关属性设置<br>(1) Eureka Server端<br>默认情况下自我保护机制是打开的，线上建议都是打开的，即不需要设置。如果在测试环境需要设置为关闭，可以通过如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#设为false，关闭自我保护</span><br><span class="line">eureka.server.enable-self-preservation=false</span><br><span class="line">#清理间隔（单位毫秒，默认是60*1000）</span><br><span class="line">eureka.server.eviction-interval-timer-in-ms=10000</span><br></pre></td></tr></table></figure>
<p>(2) Eureka Client端</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#健康检查（需要spring-boot-starter-actuator依赖）</span><br><span class="line">eureka.client.healthcheck.enabled=true</span><br><span class="line"># 单位是秒，默认30秒。此客户端发送心跳的频率</span><br><span class="line">eureka.instance.lease-renewal-interval-in-seconds=30</span><br><span class="line"># 单位是秒，默认90秒，表示eureka server在收到此client上次心跳之后，间隔多久没有收到，就摘除此服务。</span><br><span class="line">eureka.instance.lease-expiration-duration-in-seconds=10</span><br></pre></td></tr></table></figure>

<p>启动测试，注册中心将死去的服务剔除<br><img src="https://img-blog.csdnimg.cn/d63f3f638a844e5d9d92253e49095166.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="2-actuator"><a href="#2-actuator" class="headerlink" title="2.actuator"></a>2.actuator</h2><p><strong>1、下线</strong><br>使用actuator由客户端发起下线。调用客户端actuator提供的/shutdown/接口。执行完此操作之后，不仅停止了服务，还从eureka下线了。</p>
<p>actuator依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#启用shutdown</span><br><span class="line">management.endpoint.shutdown.enabled=true</span><br><span class="line">#禁用密码验证</span><br><span class="line">management.endpoint.shutdown.sensitive=false</span><br><span class="line">#开启所有的端点</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/8f4e649ad5224de58d54d205dced90fa.png"><br>通过POST方式执行实例的<a href="http://localhost:8081/actuator/shutdown%E3%80%82%E5%9C%A8postman%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:8081/actuator/shutdown。在postman执行结果如下：</a><br><img src="https://img-blog.csdnimg.cn/971659b2c2434d31ade51a7f0283dc8b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_19,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/0f9a3e55cf8e40edb161ba27b9b00777.png"><br><strong>2、 恢复上线</strong><br>此种方式下对应上线操作，就是重新部署。</p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated block green right larger" href="/2021/10/21/SpringCloud(2)/" 
  title="SpringCloud入门 ——Feign服务调用"><i class="far fa-hand-point-right"></i><span>SpringCloud入门 ——Feign服务调用</span></a>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringCloud入门】Feign服务调用</title>
    <url>/2021/10/21/SpringCloud(2)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>紧接上文，本文记录多个服务使用feign远程调用。</p>
<h1 id="一、feign是什么？"><a href="#一、feign是什么？" class="headerlink" title="一、feign是什么？"></a>一、feign是什么？</h1><p>Feign是一个声明性web服务客户端。</p>
<p>Feign远程调用，核心就是通过一系列的封装和处理，将以JAVA注解的方式定义的远程调用API接口，最终转换成HTTP的请求形式，然后将HTTP的请求的响应结果，解码成JAVA Bean，返回给调用者。</p>
<h1 id="二、代码示例"><a href="#二、代码示例" class="headerlink" title="二、代码示例"></a>二、代码示例</h1><h2 id="1-服务提供者"><a href="#1-服务提供者" class="headerlink" title="1.服务提供者"></a>1.服务提供者</h2><p>新建测试接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> <span class="string">&quot;我是服务提供者==&gt;用户id:&quot;</span> + id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-服务消费者"><a href="#2-服务消费者" class="headerlink" title="2.服务消费者"></a>2.服务消费者</h2><p>引入feign依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--feign依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用接口MyFeign.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.springboot.client.clientcustomer.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;client-provider-server&quot;, path = &quot;/api&quot;, fallback = MyFeignFallback.class</span></span><br><span class="line"><span class="meta">        , fallbackFactory = MyFeignFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>client-provider-server</code>是服务提供者在eureka注册的名字，也可以直接指定url<br>@FeignClient(name = “client-provider-server”, path = “/api”,url = “<a href="http://localhost:8081&quot;">http://localhost:8081&quot;</a>)<br>url可以直接指定第三方服务地址，path指定路径，接口的方法指定接口</p>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * feign远程调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/query/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> myFeign.getUser(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * feign远程调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/exception&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">exception</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> myFeign.exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>启动程序，可以看到服务已注册<br><img src="https://img-blog.csdnimg.cn/683ebb8f647248cab03baf70f3a56ec6.png"><br>访问<a href="http://localhost:8082/query/imid">http://localhost:8082/query/imid</a><br><img src="https://img-blog.csdnimg.cn/49ccdec60ae54bd483e460821a706518.png#pic_left"><br>成功调用</p>
<h2 id="4-Fallback熔断"><a href="#4-Fallback熔断" class="headerlink" title="4.Fallback熔断"></a>4.Fallback熔断</h2><p>在网络请求或者服务提供者发生异常，如果还想再异常情况下使系统可用，那么就需要容错处理。</p>
<p>需要配置fallback来处理异常，如果需要获取到报错信息，则要配置fallbackFactory<T></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;client-provider-server&quot;, path = &quot;/api&quot;, fallback = MyFeignFallback.class</span></span><br><span class="line"><span class="meta">        , fallbackFactory = MyFeignFallbackFactory.class)</span></span><br></pre></td></tr></table></figure>
<p>指定Feign接口的实现类，和FallbackFactory<T>工厂接口类，如下：</p>
<p>MyFeignFallback.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.springboot.client.clientcustomer.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * feign调用容错处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFeignFallback</span> <span class="keyword">implements</span> <span class="title">MyFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exception</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;网络请求超时，请稍后重试！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MyFeignFallbackFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.springboot.client.clientcustomer.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FallbackFactory工厂，获取HTTP请求错误状态码和信息</span></span><br><span class="line"><span class="comment"> * （只打印异常）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFeignFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">MyFeign</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyFeignFallback myFeignFallback;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFeignFallbackFactory</span><span class="params">(MyFeignFallback myFeignFallback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myFeignFallback = myFeignFallback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyFeign <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印异常</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> myFeignFallback;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模拟异常</p>
<p>服务提供者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/exception&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">exception</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;服务器异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/exception&quot;)</span></span><br><span class="line"><span class="function">String <span class="title">exception</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>访问<a href="http://localhost:8082/exception">http://localhost:8082/exception</a><br><img src="https://img-blog.csdnimg.cn/285732bd6dfb445ca20ad95d72586f84.png#pic_left"><br><strong>注意事项： 使用fallback，要开启Hystrix，配置<code>feign.hystrix.enabled=true</code>，如果springCloud 版本是2020.0.1或以上的，配置<code>feign.circuitbreaker.enabled=true</code>，<br>因为查看源代码，发现已修改为<code>feign.circuitbreaker.enabled</code></strong><img src="https://img-blog.csdnimg.cn/798e590971c04ed9b7823afc4fba3d44.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><p>打包出现如下报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project client-customer: Input length = 1 -&gt; [Help 1]</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2c83364ca4994f13b1d96939bf5a6f9f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>解决方法：</strong><br>对应的pom将</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.7&lt;/version&gt;</span><br><span class="line">	&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.maven.shared&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;maven-filtering&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.3&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过Feign以及JAVA的动态代理机制，使得Java 开发人员，可以不用通过HTTP框架去封装HTTP请求报文的方式，完成远程服务的HTTP调用。</p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/10/18/SpringCloud(1)/" 
  title="Eureka服务注册与发现"><i class="far fa-hand-point-left"></i><span>Eureka服务注册与发现</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/10/28/SpringCloud(3)/" 
  title="Ribbon负载均衡"><i class="far fa-hand-point-right"></i><span>Ribbon负载均衡</span></a>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringBoot学习笔记】简单整合Redis实例</title>
    <url>/2021/09/30/SpringBoot(8)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了方便搭建项目，本文是直接在windows下安装redis。<br>安装步骤参考：<a href="https://blog.csdn.net/qq_34383510/article/details/119134225?spm=1001.2014.3001.5501">Windows下载安装Redis</a>、<a href="https://blog.csdn.net/qq_34383510/article/details/120551878?spm=1001.2014.3001.5501">可视化工具安装</a></p>
<h1 id="一、使用步骤"><a href="#一、使用步骤" class="headerlink" title="一、使用步骤"></a>一、使用步骤</h1><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2.环境配置"></a>2.环境配置</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/3331844c27cdeee91ad468ab7e5fa839.png"></p>
<h2 id="3-Redis工具类"><a href="#3-Redis工具类" class="headerlink" title="3.Redis工具类"></a>3.Redis工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.dev.root.devroot.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;ALL&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间（秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, String.valueOf(value));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, String.valueOf(value), time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================Map=================================  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================Set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.singleton(redisTemplate.opsForSet().members(key));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, String.valueOf(values));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, String... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//===============================list=================================  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束  0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引  index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, (String) value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, (String) value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, String.valueOf(value));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, String.valueOf(value));</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, (String) value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes =DevRootApplication.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevRootApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String userId = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        redisUtil.set(userId,<span class="string">&quot;我是userId:123456&quot;</span>);</span><br><span class="line">        String value = (String) redisUtil.get(userId);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：<br><img src="https://img-blog.csdnimg.cn/435d8959aecf46aa86b8392a6821eb95.png"></p>
<p>没有问题对不对，但存储value为复杂的对象类型时，再来看看测试结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String userId = <span class="string">&quot;7890&quot;</span>;</span><br><span class="line">    SysUser user = <span class="keyword">new</span> SysUser();</span><br><span class="line">    user.setId(<span class="string">&quot;1234567890&quot;</span>);</span><br><span class="line">    user.setLoginName(<span class="string">&quot;loginName&quot;</span>);</span><br><span class="line">    user.setUserName(<span class="string">&quot;用户名&quot;</span>);</span><br><span class="line">    user.setLastLoginTime(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setLogicDel(<span class="number">1</span>);</span><br><span class="line">    redisUtil.set(userId, user);</span><br><span class="line">    SysUser userInfo = (SysUser) redisUtil.get(userId);</span><br><span class="line">    System.out.println(userInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/8494dc00d5ba484b9b9ced8c7e42ba6d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>出现错误。</p>
<h2 id="5-StringRedisTemplate与RedisTemplate"><a href="#5-StringRedisTemplate与RedisTemplate" class="headerlink" title="5.StringRedisTemplate与RedisTemplate"></a>5.StringRedisTemplate与RedisTemplate</h2><p>会出现上述错误，是因为工具类中，我们使用的StringRedisTemplate。</p>
<p><strong>StringRedisTemplate源码</strong><br><img src="https://img-blog.csdnimg.cn/7973da1f65fc4b5788909600674b9c33.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>可以看到StringRedisTemplate 是继承 RedisTemplate的&lt;String,String&gt;泛型，序列化使用的是<strong>StringRedisSerializer</strong>类。反序列化，也是一个得到String。<br>StringRedisTemplate适用于k-v都是String类型，如果k-v是Object类型，则需要自定义 RedisTemplate</p>
<p><strong>自定义配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.dev.root.devroot.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String的序列化方式</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Jackson2JsonRedisSerializer序列化类</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>修改RedisUtil代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br></pre></td></tr></table></figure>
<p>将代码中所有value转化为string的地方去掉<code>String.valueOf(value)</code>、<code>（String）value</code> 改为<code>value</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String userId = <span class="string">&quot;7890-redis&quot;</span>;</span><br><span class="line">    SysUser user = <span class="keyword">new</span> SysUser();</span><br><span class="line">    user.setId(<span class="string">&quot;1234567890&quot;</span>);</span><br><span class="line">    user.setLoginName(<span class="string">&quot;loginName&quot;</span>);</span><br><span class="line">    user.setUserName(<span class="string">&quot;用户名&quot;</span>);</span><br><span class="line">    user.setLastLoginTime(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setLogicDel(<span class="number">1</span>);</span><br><span class="line">    redisUtil.set(userId, user);</span><br><span class="line">    SysUser userInfo = (SysUser) redisUtil.get(userId);</span><br><span class="line">    System.out.println(userInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="https://img-blog.csdnimg.cn/16adfa7985a54a99b43a2fb1105d4bc2.png"><br><img src="https://img-blog.csdnimg.cn/7f94fa3557944b15ae34cf644cc97462.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整合Redis，主要注意设置下key和value的序列化方式，StringRedisTemplate与RedisTemplate的对比和选择。</p>
<p><strong>对比</strong><br>1.StringRedisTemplate继承了RedisTemplate。<br>2.RedisTemplate是一个泛型类，而StringRedisTemplate则不是。<br>3.StringRedisTemplate只能对key=String，value=String的键值对进行操作，RedisTemplate可以对任何类型的key-value键值对操作。<br>4.序列化的方式不同，StringRedisTemplate使用的是StringRedisSerializer类；RedisTemplate使用的是JdkSerializationRedisSerializer类，但最终都是得到了一个字节数组。反序列化，则是一个得到String，一个得到Object。</p>
<p><strong>选择</strong><br>简单来说，存取数据为String类型是，用StringRedisTemplate即可。而数据为复杂的对象类型，使用RedisTemplate。</p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/09/26/SpringBoot(7)/" 
  title="统一异常处理"><i class="far fa-hand-point-left"></i><span>统一异常处理</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/10/08/SpringBoot(9)/" 
  title="Filter过滤器的使用"><i class="far fa-hand-point-right"></i><span>Filter过滤器的使用</span></a>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringCloud入门】Ribbon负载均衡</title>
    <url>/2021/10/28/SpringCloud(3)/</url>
    <content><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>目前主流的负载方案分为以下两种：</p>
<p>• <strong>集中式负载均衡</strong>：在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如 F5），也有软件的（比如 Nginx）。<br>也就是<strong>服务器端负载均衡</strong>，请求到达后端服务器之后由这些负载均衡器根据⼀定的算法将请求路由到⽬标服务器处理。</p>
<p>• <strong>客户端负载均衡</strong>，根据自己的请求情况做负载，Ribbon 就属于客户端自己做负载。服务消费者客户端会有⼀个服务器地址列表，调⽤⽅在请求前通过⼀定的负载均衡算法选择⼀个服务器进⾏访问，负载均衡算法的执⾏是在请求客户端进⾏。</p>
<h1 id="一、SpringCloud-Ribbon简介"><a href="#一、SpringCloud-Ribbon简介" class="headerlink" title="一、SpringCloud Ribbon简介"></a>一、SpringCloud Ribbon简介</h1><p>Spring Cloud Ribbon 是一个基于 HTTP 和 TCP 的客户端负载均衡工具，它基于 <strong>Netflix Ribbon</strong> 实现。<br>通过 Spring Cloud 的封装，可以让我们轻松地将面向服务的 REST 模版请求自动转换成客户端负载均衡的服务调用。</p>
<h1 id="二、Ribbon在Spring-Cloud中的使用"><a href="#二、Ribbon在Spring-Cloud中的使用" class="headerlink" title="二、Ribbon在Spring Cloud中的使用"></a>二、Ribbon在Spring Cloud中的使用</h1><h2 id="1-使用-RestTemplate-与整合-Ribbon"><a href="#1-使用-RestTemplate-与整合-Ribbon" class="headerlink" title="1.使用 RestTemplate 与整合 Ribbon"></a>1.使用 RestTemplate 与整合 Ribbon</h2><p>Spring 提供了一种简单便捷的模板类来进行 API 的调用，那就是 RestTemplate。(在<a href="/2021/10/18/SpringCloud(1)">SpringCloud入门 —— Eureka服务注册与发现</a>已经使用过restTemplate)</p>
<p>新建一个同之前一样的服务（端口不同），作为服务提供者（可看做是一个“小集群”）<br><img src="https://img-blog.csdnimg.cn/img_convert/4d6ae4c5fb037651455e7b381d0461e2.png"><br>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/ribbonTest&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ribbonTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;我是服务提供者 -- 我的端口是：&quot;</span> + port;</span><br></pre></td></tr></table></figure>

<p><strong>服务消费者</strong></p>
<p>在服务消费者中已经引入了eureka-client依赖，这里就不用加入其他的依赖了，因为 Eureka 中已经引用了 Ribbon。</p>
<p>RestTemplate配置，加上<strong>LoadBalanced</strong>注解实现负载均衡</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.springboot.client.clientcustomer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.client.RestTemplateBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://CLIENT-PROVIDER-SERVER&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * restTemplate负载均衡测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/restTemplate/testRibbon&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRibbon2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用restTemplate发起请求</span></span><br><span class="line">    String result = restTemplate.getForEntity(REST_URL_PREFIX + <span class="string">&quot;/api/ribbonTest&quot;</span>, String.class).getBody();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动服务注册中心，访问Eureka（localhost:8080），三个服务已经注册<br><img src="https://img-blog.csdnimg.cn/img_convert/a247268a6628c017bfcbe63cb3a627e5.png"></p>
<p>测试接口，消费者调用<a href="http://localhost:8082/restTemplate/testRibbon%EF%BC%8CRibbon%E4%BC%9A%E4%BB%8E%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E6%8B%89%E5%8F%96%E5%AE%9E%E4%BE%8B%E9%9B%86%E5%90%88%E8%BF%9B%E8%A1%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%B0%83%E7%94%A8%E8%83%8C%E5%90%8E%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">http://localhost:8082/restTemplate/testRibbon，Ribbon会从注册中心的服务列表拉取实例集合进行负载均衡调用背后的服务提供者，如下图所示：</a><br><img src="https://img-blog.csdnimg.cn/img_convert/ace3fa17cf4789a5529340070b83dd91.gif"></p>
<h2 id="2-使用-Feign客户端"><a href="#2-使用-Feign客户端" class="headerlink" title="2.使用 Feign客户端"></a>2.使用 Feign客户端</h2><p>Feign客户端实际是对Ribbon进行了一个封装；spring-cloud-starter-feign 里面已经包含了 spring-cloud-starter-ribbon</p>
<p>不熟悉Feign调用，请戳<a href="/2021/10/21/SpringCloud(2)">SpringCloud入门 —— Feign服务调用</a></p>
<p>测试代码：<br><strong>服务消费者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * feign负载均衡测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/feign/testRibbon&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRibbon1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> myFeign.ribbonTest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;client-provider-server&quot;, path = &quot;/api&quot;, fallback = MyFeignFallback.class</span></span><br><span class="line"><span class="meta">        , fallbackFactory = MyFeignFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFeign</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ribbonTest&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">ribbonTest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><img src="https://img-blog.csdnimg.cn/img_convert/88db2b52e00a87a741c6d95eb7447f79.gif"></p>
<h1 id="三、Ribbon负载均衡策略"><a href="#三、Ribbon负载均衡策略" class="headerlink" title="三、Ribbon负载均衡策略"></a>三、Ribbon负载均衡策略</h1><p>Ribbon 作为一款客户端负载均衡框架，<strong>默认的负载策略是轮询</strong>，同时也提供了很多其他的策略，能够让用户根据自身的业务需求进行选择。</p>
<table>
<thead>
<tr>
<th>负载均衡策略</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>RoundRobinRule</td>
<td>轮询选择，轮询 index，选择 index 对应位置的 Server。</td>
</tr>
<tr>
<td>BestAvailabl</td>
<td>选择一个最小的并发请求的 Server，逐个考察 Server，如果 Server 被标记为错误，则跳过，然后再选择 ActiveRequestCount 中最小的 Server。</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>过滤掉那些一直连接失败的且被标记为 circuit tripped 的后端 Server，并过滤掉那些高并发的后端 Server 或者使用一个 AvailabilityPredicate 来包含过滤 Server 的逻辑。其实就是检查 Status 里记录的各个 Server 的运行状态。</td>
</tr>
<tr>
<td>ZoneAvoidanceRule</td>
<td>使用 ZoneAvoidancePredicate 和 AvailabilityPredicate 来判断是否选择某个 Server，前一个判断判定一个 Zone 的运行性能是否可用，剔除不可用的 Zone（的所有 Server），AvailabilityPredicate 用于过滤掉连接数过多的 Server。</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个 Server。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>对选定的负载均衡策略机上重试机制，也就是说当选定了某个策略进行请求负载时在一个配置时间段内若选择 Server 不成功，则一直尝试使用 subRule 的方式选择一个可用的 Server。</td>
</tr>
<tr>
<td>ResponseTimeWeightedRule</td>
<td>作用同 WeightedResponseTimeRule，ResponseTime-Weighted Rule 后来改名为 WeightedResponseTimeRule。</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>根据响应时间分配一个 Weight（权重），响应时间越长，Weight 越小，被选中的可能性越低。</td>
</tr>
</tbody></table>
<p><strong>代码配置Ribbon</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule(); <span class="comment">//分配策略：随机选择一个server</span></span><br><span class="line"><span class="comment">//        return new BestAvailableRule(); //分配策略：选择一个最小的并发请求的server，逐个考察Server，如果Server被tripped了，则忽略</span></span><br><span class="line"><span class="comment">//        return new RoundRobinRule(); //分配策略：轮询选择，轮询index，选择index对应位置的server</span></span><br><span class="line"><span class="comment">//        return new WeightedResponseTimeRule(); //分配策略：根据响应时间分配一个weight(权重)，响应时间越长，weight越小，被选中的可能性越低</span></span><br><span class="line"><span class="comment">//        return new ZoneAvoidanceRule(); //分配策略：复合判断server所在区域的性能和server的可用性选择server</span></span><br><span class="line"><span class="comment">//        return new RetryRule(); //分配策略：对选定的负载均衡策略机上重试机制，在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPing <span class="title">ribbonPing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PingUrl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerListSubsetFilter <span class="title">serverListFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServerListSubsetFilter filter = <span class="keyword">new</span> ServerListSubsetFilter();</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动类上加上<code>@RibbonClient(name = &quot;client-provider-server&quot;, configuration = RibbonConfig.class)</code>，关联 RibbonConfig ，用 name 来指定调用的服务名称。</p>
<p><strong>配置文件配置 Ribbon</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NFLoadBalancerClassName: Should implement ILoadBalancer(负载均衡器操作接口)</span><br><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NFLoadBalancerRuleClassName: Should implement IRule(负载均衡算法)</span><br><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NFLoadBalancerPingClassName: Should implement IPing(服务可用性检查)</span><br><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NIWSServerListClassName: Should implement ServerList(服务列表获取)</span><br><span class="line"><span class="tag">&lt;<span class="name">clientName</span>&gt;</span>.ribbon.NIWSServerListFilterClassName: Should implement ServerList­Filter(服务列表的过滤)</span><br></pre></td></tr></table></figure>
<p>更多配置请查看官方文档</p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/10/21/SpringCloud(2)/" 
  title="【SpringCloud入门】Feign服务调用"><i class="far fa-hand-point-left"></i><span>【SpringCloud入门】Feign服务调用</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/11/24/SpringCloud(4)/" 
  title="【SpringCloud入门】Zuul路由配置"><i class="far fa-hand-point-right"></i><span>【SpringCloud入门】Zuul路由配置</span></a>

]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringCloud入门】SSO 单点登录</title>
    <url>/2021/11/29/SpringCloud(5)/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文适合初学者，如有不足或错误之处，还请大家在下方留言指正。<strong>（文章稍长，建议点赞收藏）</strong></p>
<h2 id="一、SSO单点登录是什么？"><a href="#一、SSO单点登录是什么？" class="headerlink" title="一、SSO单点登录是什么？"></a>一、SSO单点登录是什么？</h2><h3 id="单点登录简介"><a href="#单点登录简介" class="headerlink" title="单点登录简介"></a>单点登录简介</h3><p>单点登录SSO (Single Sign On) 是指<strong>在一个多系统共存的环境下，用户在一处登录后，就不用在其他系统中登录，也就是用户的一次登录能得到其他所有系统的信任。</strong></p>
<h3 id="单系统登录"><a href="#单系统登录" class="headerlink" title="单系统登录"></a>单系统登录</h3><p>在之前我们做的<code>单系统登录</code>，它的核心是Cookie，Cookie携带会话id在浏览器与服务器之间维护会话状态。</p>
<h4 id="Cookie-和-Session"><a href="#Cookie-和-Session" class="headerlink" title="Cookie 和 Session"></a>Cookie 和 Session</h4><p>众所周知，<code>HTTP是无状态的协议</code>，这意味着服务器无法确认用户的信息。于是乎，W3C就提出了：给每一个用户都发一个通行证，无论谁访问的时候都需要携带通行证，这样服务器就可以从通行证上确认用户的信息。通行证就是<code>Cookie</code>。</p>
<p>如果说Cookie是检查用户身上的”通行证“来确认用户的身份，那么<code>Session</code>就是通过检查服务器上的”客户明细表“来确认用户的身份的。<strong>Session相当于在服务器中建立了一份“客户明细表”。</strong></p>
<p>HTTP协议是无状态的，Session不能依据HTTP连接来判断是否为同一个用户。于是乎：服务器向用户浏览器发送了一个名为<code>JESSIONID</code>的Cookie，它的值是Session的id值。<strong>其实Session是依据Cookie来识别是否是同一个用户。</strong></p>
<p>那它们之间有什么区别呢？</p>
<blockquote>
<p><strong>Cookie 一般用来保存用户信息（数据保存在客户端(浏览器端)）</strong><br>①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；<br>②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；<br>③登录一次网站后访问网站其他页面不需要重新登录。</p>
</blockquote>
<blockquote>
<p><strong>Session 的主要作用就是通过服务端记录用户的状态（数据保存在服务器端）</strong><br>典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</p>
</blockquote>
<p><code>单系统登录流程</code>：</p>
<p>1.用户登录时，验证用户的账户和密码<br>2.生成一个Token保存在数据库中，将Token写到Cookie中<br>3.将用户数据保存在Session中<br>4.请求时都会带上Cookie，检查有没有登录，如果已经登录则放行</p>
<h3 id="多系统登录"><a href="#多系统登录" class="headerlink" title="多系统登录"></a>多系统登录</h3><p>虽然单系统登录有多种完美的解决方案，但对于多系统应用群已经不再适用了，为什么呢？</p>
<p>主要存在以下几个问题：</p>
<ol>
<li> <strong>Session不共享问题</strong></li>
<li><strong>Cookie跨域的问题</strong></li>
</ol>
<p>其实两个问题很类似<br><strong>Session不共享：很容易理解，多系统即可能有多个Tomcat，而Session是依赖当前系统的Tomcat，所以系统A的Session和系统B的Session是不共享的。</strong><br><strong>Cookie的域（通常对应网站的域名），浏览器发送http请求时会自动携带与该域匹配的Cookie，而不是所有Cookie</strong></p>
<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p><strong>Session不共享问题</strong>：</p>
<ul>
<li>使用广播机制将Session复制到各个服务器</li>
<li>把Session数据放在Redis中（使用Redis模拟Session）</li>
</ul>
<p><strong>Cookie跨域的问题</strong>：</p>
<ul>
<li>客户端对Cookie进行解析，将Token解析出来，此后请求都把Token带上</li>
<li>多个域名共享Cookie，在写到客户端的时候设置Cookie的domain。</li>
</ul>
<h4 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h4><p>上面的问题解决，一个简单的单点登录就已经完成了，来看看它的登录流程吧<br><img src="https://img-blog.csdnimg.cn/58099d12901a468fabe43c2c9b7d73e1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br>对于上图的说明：</p>
<p>1.用户访问系统A受保护资源，系统A发现用户并没有登录，于是<strong>重定向到sso认证中心，并将自己的地址作为参数</strong><br>2.sso认证中心发现用户未登录，将用户引导至登录页面<br>3.用户进行输入用户名和密码进行登录，<strong>用户与认证中心建立全局会话</strong>（生成一份token，写到cookie中，保存在浏览器上）<br>4.sso认证中心带着token跳转回系统A<br>5.系统A去sso认证中心验证这个token，系统A和用户建立局部会话（创建Session）。系统A已登录<br>6.用户访问系统B的受保护资源，重定向到sso认证中心，并将自己的地址作为参数<br>7.认证中心根据带过来的Cookie发现已经与用户建立了全局会话了，认证中心重定向回系统B，并把Token携带过去给系统B<br>8.系统B去sso认证中心验证这个token，系统B和用户建立局部会话（创建Session）。系统B已登录</p>
<h4 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h4><p>有了登录，肯定就有注销登录。单点登录自然也要单点注销，在一个子系统中注销，所有子系统的会话都将被销毁</p>
<p>首先要了解，全局会话和局部会话的约束关系：</p>
<ul>
<li>局部会话存在，全局会话一定存在</li>
<li>全局会话存在，局部会话不一定存在</li>
<li><strong>全局会话销毁，局部会话必须销毁</strong></li>
</ul>
<p> 注销流程：</p>
<blockquote>
<p>1.用户发起注销请求<br>2.系统A根据用户与系统A建立的会话id拿到令牌，向sso认证中心发起注销请求<br>3.sso认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址<br>4.sso认证中心向所有注册系统发起注销请求<br>5.各注册系统接收sso认证中心的注销请求，销毁局部会话<br>6.sso认证中心引导用户至登录页面</p>
</blockquote>
<h2 id="二、代码示例"><a href="#二、代码示例" class="headerlink" title="二、代码示例"></a>二、代码示例</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>上章讲了<a href="https://blog.csdn.net/qq_34383510/article/details/121517746?spm=1001.2014.3001.5501">动态路由zuul</a>，我们紧接上章，通过zuul配合redis实现单机版的sso单点登录。</p>
<p>首先创建一个springboot模块sso-server，并在eureka上注册<br><img src="https://img-blog.csdnimg.cn/992609d7a84944a0b5be40264fa4b405.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_19,color_FFFFFF,t_70,g_se,x_16"><br><strong>引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>接口创建</strong></p>
<p>这里验证token，只是简单判断了一下是否存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.local.springboot.sso.ssoserver.util.AuthUtil;</span><br><span class="line"><span class="keyword">import</span> com.local.springboot.sso.ssoserver.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sso&quot;)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthUtil authUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证用户登录令牌是否有效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessToken 登录令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 有效、false 无效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/checkAccessToken/&#123;accessToken&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkAccessToken</span><span class="params">(<span class="meta">@PathVariable(&quot;accessToken&quot;)</span> String accessToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authUtil.checkAccessToken(accessToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录界面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">toLogin</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户认证登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response HttpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url      服务器请求url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 认证结果、重定向请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletResponse response, String userName, String password, String url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用户认证，并生成Token</span></span><br><span class="line">        String accessToken = authUtil.checkUser(userName, password);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(accessToken)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 与用户建立全局会话（将Token写到cookie中）</span></span><br><span class="line">                Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;accessToken&quot;</span>, accessToken);</span><br><span class="line">                cookie.setMaxAge(<span class="number">60</span> * <span class="number">3</span>);</span><br><span class="line">                <span class="comment">//设置访问路径</span></span><br><span class="line">                cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                response.addCookie(cookie);</span><br><span class="line">                <span class="comment">// 重定向请求</span></span><br><span class="line">                response.sendRedirect(url);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;认证失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>用户认证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.local.springboot.sso.ssoserver.entity.TSysUserEntity;</span><br><span class="line"><span class="keyword">import</span> com.local.springboot.sso.ssoserver.serice.TSysUserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hzl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021-09-14 18:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用户认证工具类</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TSysUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证用户名和密码；并返回登录令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">checkUser</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">        String accessToken = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 判断用户名和密码是否正确</span></span><br><span class="line">        TSysUserEntity entity = userService.getUserByName(userName);</span><br><span class="line">        <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String dbPwd = entity.getPassword();</span><br><span class="line">            String pwd = Md5Util.MD5(password);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.equals(dbPwd, pwd)) &#123;</span><br><span class="line">                <span class="comment">// 用户名+时间戳加密生成登录令牌、存放redis</span></span><br><span class="line">                String md5Str = userName + System.currentTimeMillis();</span><br><span class="line">                accessToken = Md5Util.MD5(md5Str);</span><br><span class="line">                <span class="comment">// 登录令牌为key、存储用户信息(过期时间3分钟)</span></span><br><span class="line">                redisUtil.set(accessToken, entity.getId(), <span class="number">3</span> * <span class="number">60</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Md5Util.MD5(<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证用户登录令牌是否有效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessToken 登录令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 有效、false 无效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkAccessToken</span><span class="params">(String accessToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisUtil.hasKey(accessToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLoginUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>application.properties配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">11033</span></span><br><span class="line">spring.application.name=sso-server</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http:<span class="comment">//localhost:8080/eureka/</span></span><br><span class="line"></span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/local_develop?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line"></span><br><span class="line">#关闭页面缓存</span><br><span class="line">spring.thymeleaf.cache=<span class="keyword">false</span></span><br><span class="line">#thymeleaf访问根路径</span><br><span class="line">spring.thymeleaf.prefix=classpath:/thymeleaf/</span><br><span class="line">spring.thymeleaf.mode=LEGACYHTML5</span><br><span class="line"></span><br><span class="line">spring.redis.host=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">spring.redis.database=<span class="number">0</span></span><br><span class="line">spring.redis.port=<span class="number">6379</span></span><br><span class="line">spring.redis.password=</span><br><span class="line">spring.redis.timeout=<span class="number">1000</span></span><br><span class="line">spring.redis.jedis.pool.max-active=<span class="number">200</span></span><br><span class="line">spring.redis.jedis.pool.max-wait=-<span class="number">1</span></span><br><span class="line">spring.redis.jedis.pool.max-idle=<span class="number">10</span></span><br><span class="line">spring.redis.jedis.pool.min-idle=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong>zuul-server</strong></p>
<p>访问分布式系统的任意请求，被Zuul的Filter拦截过滤，修改过滤器逻辑，用户登录验证请求sso认证中心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.local.springboot.zuul.zuulserver.feign.SsoFeign;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier(&quot;ssoFeignFallback&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SsoFeign feign;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器类型，可选值有 pre、route、post、error。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过int值来定义过滤器的执行顺序</span></span><br><span class="line"><span class="comment">     * 过滤器的执行顺序，数值越小，优先级越高。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否执行该过滤器，true 为执行，false 为不执行</span></span><br><span class="line"><span class="comment">     * 这个也可以利用配置中心来实现，达到动态的开启和关闭过滤器。</span></span><br><span class="line"><span class="comment">     * 配置文件中禁用过滤器：</span></span><br><span class="line"><span class="comment">     * 【zuul.过滤器的类名.过滤器类型.disable=true，如：zuul.MyAccessFilter.pre.disable=true】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器具体逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        HttpServletResponse response = ctx.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取cookie里面的accessToken值</span></span><br><span class="line">        String accessToken = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;accessToken&quot;</span>.equals(cookie.getName())) &#123;</span><br><span class="line">                    accessToken = cookie.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 请求url地址</span></span><br><span class="line">        String url = getUrl(request);</span><br><span class="line">        <span class="comment">// 过滤登录接口、登录页面、若带登录令牌，则验证令牌是否有效；有效则表示为登录用户</span></span><br><span class="line">        <span class="keyword">if</span> (url.contains(<span class="string">&quot;/sso-server/sso/toLogin&quot;</span>) || url.contains(<span class="string">&quot;/sso-server/sso/login&quot;</span>) ||</span><br><span class="line">                ((StringUtils.isNotBlank(accessToken)) &amp;&amp; feign.checkAccessToken(accessToken))) &#123;</span><br><span class="line">            <span class="comment">// 标识为登录用户</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">true</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 标识为未登录用户，跳转至sso认证中心，并将自己的地址作为参数</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">302</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.sendRedirect(<span class="string">&quot;http://localhost:8088/sso-server/sso/toLogin?url=&quot;</span> + url);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getUrl</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 请求url初始化</span></span><br><span class="line">        StringBuilder url = <span class="keyword">new</span> StringBuilder(request.getRequestURL().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求方式</span></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">            <span class="comment">// GET请求拼接参数</span></span><br><span class="line">            url.append(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">            <span class="comment">// 参数集合</span></span><br><span class="line">            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            Object[] keys = parameterMap.keySet().toArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 参数名</span></span><br><span class="line">                String key = (String) keys[i];</span><br><span class="line">                <span class="comment">// 参数值</span></span><br><span class="line">                String value = parameterMap.get(key)[<span class="number">0</span>];</span><br><span class="line">                url.append(key).append(<span class="string">&quot;=&quot;</span>).append(value).append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            url.delete(url.length() - <span class="number">1</span>, url.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改路由配置，映射sso-server</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">zuul.routes.sso-server.path=/sso-server/**</span><br><span class="line">zuul.routes.sso-server.service-id=sso-server</span><br><span class="line">#Zuul丢失Cookie的解决方案：</span><br><span class="line">zuul.sensitive-headers=</span><br></pre></td></tr></table></figure>
<p>这里偷了个懒，并没有做各个子系统创建session的步骤…</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动服务（不要忘了Redis服务）</p>
<p>如图：<br><img src="https://img-blog.csdnimg.cn/0d7e23e1262244cb88f15b11661e0337.png"><br>浏览器访问 <a href="http://localhost:8088/client-customer/feign/testRibbon%EF%BC%8C%E8%A2%ABzuul-server%E6%8B%A6%E6%88%AA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0sso-server%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2">http://localhost:8088/client-customer/feign/testRibbon，被zuul-server拦截重定向到sso-server登录页面</a></p>
<p><img src="https://img-blog.csdnimg.cn/87577068da3d4742a9d8b1807d3258f0.gif#pic_center"><br>输入用户名和密码，登录失败，返回提示；登录成功，则重定向到之前的请求<br><img src="https://img-blog.csdnimg.cn/fc404d5d31274873b8f879b13f182a24.gif#pic_center"><br>再次访问<a href="http://localhost:8088/client-provider/api/provider%EF%BC%8C%E6%88%90%E5%8A%9F%E8%AE%BF%E9%97%AE">http://localhost:8088/client-provider/api/provider，成功访问</a></p>
<p><img src="https://img-blog.csdnimg.cn/c2e8fc73de7e4a3881f9405d29eb2e63.gif#pic_center"></p>
<p>可以看到cookie及过期时间<br><img src="https://img-blog.csdnimg.cn/c66d2384c19643e5b76c4c50dd97a5f7.png"><br>3分钟后我们再次访问 cookie、Redis失效，需要重新登录</p>
<p>到此，简单的sso单点登录就已经完成。</p>
<p>涉及以往文章：</p>
<a class="btn-beautify button--animated red left larger" href="/2021/09/30/SpringBoot(8)/" 
  title="【SpringBoot学习笔记】简单整合Redis实例"><i class="far fa-hand-point-left"></i><span>【SpringBoot学习笔记】简单整合Redis实例</span></a>
<a class="btn-beautify button--animated red left larger" href="/2021/10/21/SpringCloud(2)/" 
  title="【SpringCloud入门】Feign服务调用"><i class="far fa-hand-point-left"></i><span>【SpringCloud入门】Feign服务调用</span></a>
<a class="btn-beautify button--animated red left larger" href="/2021/11/24/SpringCloud(4)/" 
  title="【SpringCloud入门】Zuul路由配置"><i class="far fa-hand-point-left"></i><span>【SpringCloud入门】Zuul路由配置</span></a>

<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/11/24/SpringCloud(4)/" 
  title="【SpringCloud入门】Zuul路由配置"><i class="far fa-hand-point-left"></i><span>【SpringCloud入门】Zuul路由配置</span></a>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>登录</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java 基础】Java异常处理和设计</title>
    <url>/2021/11/25/java-Base-Exception/</url>
    <content><![CDATA[<p>异常（exception）是在运行程序时产生的一种异常情况，已经成为了衡量一门语言是否成熟的标准之一。</p>
<h2 id="一、什么是异常"><a href="#一、什么是异常" class="headerlink" title="一、什么是异常"></a>一、什么是异常</h2><blockquote>
<p><strong>程序运行时，发生的不被期望的事件，它阻止了程序按照程序员的预期正常执行，这就是异常。</strong></p>
</blockquote>
<p>那如果程序产生异常，是任程序自生自灭，立刻退出终止，还是输出错误给用户？Java 提供了更加优秀的解决办法：<strong>异常处理机制</strong>。</p>
<p>Java 通过面向对象的方法来处理异常。在一个方法的运行过程中，如果发生了异常，则这个方法会产生代表该异常的一个对象，并把它交给运行时的系统，运行时系统寻找相应的代码来处理这一异常。</p>
<h2 id="二、异常的分类"><a href="#二、异常的分类" class="headerlink" title="二、异常的分类"></a>二、异常的分类</h2><p>为了能够及时有效地处理程序中的运行错误，Java 专门引入了异常类 Throwable 类。</p>
<p><img src="https://img-blog.csdnimg.cn/961d66c351594eafbdeac5ec04db7b67.png" alt="异常结构图"></p>
<h3 id="Error和Exception"><a href="#Error和Exception" class="headerlink" title="Error和Exception"></a>Error和Exception</h3><p>Throwable： 有两个重要的子类：Exception（异常） 和 Error（错误） ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p>
<p>Error是无法处理的异常，比如OutOfMemoryError，一般发生这种异常，JVM会选择终止程序。因此我们编写程序时不需要关心这类异常。</p>
<p>其中异常类 Exception 又分为<strong>运行时异常</strong>和<strong>非运行时异常</strong>，这两种异常有很大的区别，也称为<strong>不检查异常</strong>（Unchecked Exception）和<strong>检查异常</strong>（Checked Exception）。</p>
<h3 id="常见的-Error-和-Exception"><a href="#常见的-Error-和-Exception" class="headerlink" title="常见的 Error 和 Exception"></a>常见的 Error 和 Exception</h3><p>1）运行时异常（RuntimeException）：</p>
<p>• NullPropagation：空指针异常；<br>• ClassCastException：类型强制转换异常<br>• IllegalArgumentException：传递非法参数异常<br>• IndexOutOfBoundsException：下标越界异常<br>• NumberFormatException：数字格式异常</p>
<p>2）非运行时异常：</p>
<p>• ClassNotFoundException：找不到指定 class 的异常<br>• IOException：IO 操作异常</p>
<p>3）错误（Error）：</p>
<p>• NoClassDefFoundError：找不到 class 定义异常<br>• StackOverflowError：深递归导致栈被耗尽而抛出的异常<br>• OutOfMemoryError：内存溢出异常</p>
<h3 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h3><p>介绍Throwable 类的主要方法:<br>| 方法 | 说明  |<br>|–|–|<br>| public String getMessage() | 返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。 |<br>| public Throwable getCause() | 返回一个Throwable 对象代表异常原因。 |<br>| public String toString() | 使用getMessage()的结果返回类的串级名字。 |<br>| public void printStackTrace() | 打印toString()结果和栈层次到System.err，即错误输出流。 |<br>| public StackTraceElement [] getStackTrace() | 返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。 |<br>| public Throwable fillInStackTrace() | 用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。 |</p>
<h2 id="三、Java异常处理机制"><a href="#三、Java异常处理机制" class="headerlink" title="三、Java异常处理机制"></a>三、Java异常处理机制</h2><blockquote>
<p><strong>Java 的异常处理通过 5 个关键字来实现：try、catch、throw、throws 和 finally。</strong></p>
</blockquote>
<p>try catch 语句用于捕获并处理异常，finally 语句用于在任何情况下（除特殊情况外）都必须执行的代码，throw 语句用于拋出异常，throws 语句用于声明可能会出现的异常。</p>
<p>代码说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    逻辑程序块</span><br><span class="line">&#125; <span class="keyword">catch</span>(ExceptionType1 e) &#123;</span><br><span class="line">    处理代码块<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExceptionType2 e) &#123;</span><br><span class="line">    处理代码块<span class="number">2</span></span><br><span class="line">    <span class="keyword">throw</span>(e);    <span class="comment">// 再抛出这个&quot;异常&quot;</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    释放资源代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异常处理的机制如下：<br>• 在方法中用 try catch 语句捕获并处理异常，catch 语句可以有多个，用来匹配多个异常。<br>• 对于处理不了的异常或者要转型的异常，在方法的声明处通过 throws 语句拋出异常，即由上层的调用方法来处理。</p>
<p>再来看下面一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> Main().openFile();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">openFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/a.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> ch = inputStream.read();</span><br><span class="line">            System.out.println(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;step1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;file not found&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;step2&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;io exception&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;step3&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally block&quot;</span>);</span><br><span class="line">            <span class="comment">//return &quot;finally&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>file not found<br>finally block<br>step2</p>
</blockquote>
<p>可以看出，在try块中发生FileNotFoundException之后，就跳到第一个catch块，打印”file not found”信息，并将”step2”赋值给返回值，然后执行finally块，最后将返回值返回。</p>
<p>而当我们将 finally 代码块中return语句注释去掉，运行结果变为：</p>
<blockquote>
<p>file not found<br>finally block<br>finally</p>
</blockquote>
<p>返回值被重新覆盖了，所以在使用try..catch..finally块的时候，注意千万不要在finally块中使用return，因为finally中的return会覆盖已有的返回值。</p>
<h3 id="finally块不会被执行的情况"><a href="#finally块不会被执行的情况" class="headerlink" title="finally块不会被执行的情况"></a>finally块不会被执行的情况</h3><p>前面说了无论是否捕获或处理异常，finally块里的语句都会被执行。（当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行）</p>
<p>那有没有什么情况finally块不会被执行呢？</p>
<p>答案是有的，在以下4种特殊情况下，finally块不会被执行：</p>
<ol>
<li>在finally语句块中发生了异常。</li>
<li>在前面的代码中用了System.exit()退出程序。</li>
<li>程序所在的线程死亡。</li>
<li>关闭CPU。</li>
</ol>
<h2 id="四、异常的链化"><a href="#四、异常的链化" class="headerlink" title="四、异常的链化"></a>四、异常的链化</h2><p>在一些大型的，模块化的软件开发中，一旦一个地方发生异常，则如骨牌效应一样，将导致一连串的异常。假设B模块完成自己的逻辑需要调用A模块的方法，如果A模块发生异常，则B也将不能完成而发生异常，但是B在抛出异常时，会将A的异常信息掩盖掉，这将使得异常的根源信息丢失。<strong>异常的链化可以将多个模块的异常串联起来，使得异常信息不会丢失。</strong></p>
<p><strong>异常链化</strong>：<strong>以一个异常对象为参数构造新的异常对象。新的异对象将包含先前异常的信息</strong>。这项技术主要是异常类的一个带Throwable参数的函数来实现的。这个当做参数的异常，我们叫他根源异常（cause）。</p>
<h2 id="五、子类重写父类异常处理"><a href="#五、子类重写父类异常处理" class="headerlink" title="五、子类重写父类异常处理"></a>五、子类重写父类异常处理</h2><p>当子类重写父类的带有 throws声明的函数时，其throws声明的异常必须在父类异常的可控范围内——用于处理父类的throws方法的异常处理器，必须也适用于子类的这个带throws方法 。这是为了支持多态。</p>
<p>简单来说：父类方法throws 的是2个异常，子类就不能throws 3个及以上的异常。父类throws IOException，子类就必须throws IOException或者IOException的子类。</p>
<p>如果父类的方法声明的异常类型只有非运行时异常（运行时异常），则子类在重写该方法的时候声明的异常也只能有非运行时异常（运行时异常），不能含有运行时异常（非运行时异常）。</p>
<h2 id="六、异常处理设计"><a href="#六、异常处理设计" class="headerlink" title="六、异常处理设计"></a>六、异常处理设计</h2><p>1.<code>只在必要使用异常的地方才使用异常，不要用异常去控制程序的流程</code></p>
<p>谨慎地使用异常，异常捕获的代价非常高昂，异常使用过多会严重影响程序的性能。</p>
<p>2.<code>切忌使用空catch块</code></p>
<p>在捕获了异常之后什么都不做，相当于忽略了这个异常。千万不要使用空的catch块，空的catch块意味着你在程序中隐藏了错误和异常，并且很可能导致程序出现不可控的执行结果。如果你非常肯定捕获到的异常不会以任何方式对程序造成影响，最好用Log日志将该异常进行记录，以便日后方便更新和维护。</p>
<p>3.<code>检查异常和非检查异常的选择</code></p>
<p>一旦你决定抛出异常，你就要决定抛出什么异常。这里面的主要问题就是抛出检查异常还是非检查异常。</p>
<p>　　检查异常导致了太多的try…catch代码，可能有很多检查异常对开发人员来说是无法合理地进行处理的，比如SQLException，而开发人员却不得不去进行try…catch，这样就会导致经常出现这样一种情况：逻辑代码只有很少的几行，而进行异常捕获和处理的代码却有很多行。这样不仅导致逻辑代码阅读起来晦涩难懂，而且降低了程序的性能。</p>
<p>　　我个人建议尽量避免检查异常的使用，如果确实该异常情况的出现很普遍，需要提醒调用者注意处理的话，就使用检查异常；否则使用非检查异常。</p>
<p>　　因此，在一般情况下，我觉得尽量将检查异常转变为非检查异常交给上层处理。</p>
<p>4.<code>注意catch块的顺序</code></p>
<p>不要把上层类的异常放在最前面的catch块。比如下面这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:/a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> ch = inputStream.read();</span><br><span class="line">        System.out.println(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;step1&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">　　      System.out.println(<span class="string">&quot;io exception&quot;</span>);　　      </span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;step2&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;file not found&quot;</span>);　　　　      </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;step3&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally block&quot;</span>);</span><br><span class="line">        <span class="comment">//return &quot;finally&quot;;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>第二个catch的FileNotFoundException将永远不会被捕获到，因为FileNotFoundException是IOException的子类。</p>
<p>5.<code>不要将提供给用户看的信息放在异常信息里</code></p>
<p>比如下面这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String user = <span class="keyword">null</span>;</span><br><span class="line">            String pwd = <span class="keyword">null</span>;</span><br><span class="line">            login(user,pwd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String user,String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>||pwd==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;用户名或者密码为空&quot;</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>展示给用户错误提示信息最好不要跟程序混淆一起，比较好的方式是将所有错误提示信息放在一个配置文件中统一管理。</p>
<p>6.<code>避免多次在日志信息中记录同一个异常</code></p>
<p>只在异常最开始发生的地方进行日志信息记录。很多情况下异常都是层层向上跑出的，如果在每次向上抛出的时候，都Log到日志系统中，则会导致无从查找异常发生的根源。</p>
<p>7.<code>异常处理尽量放在高层进行</code></p>
<p>尽量将异常统一抛给上层调用者，由上层调用者统一之时如何进行处理。如果在每个出现异常的地方都直接进行处理，会导致程序异常处理流程混乱，不利于后期维护和异常错误排查。由上层统一进行处理会使得整个程序的流程清晰易懂。</p>
<p>8.<code>在finally中释放资源</code></p>
<p>如果有使用文件读取、网络操作以及数据库操作等，记得在finally中释放资源。这样不仅会使得程序占用更少的资源，也会避免不必要的由于资源未释放而发生的异常情况。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在程序设计中，进行异常处理是非常关键和重要的一部分。一个程序的异常处理框架的好坏直接影响到整个项目的代码质量以及后期维护成本和难度。</p>
<p>参考资料：<a href="https://www.cnblogs.com/dolphin0520/p/3769804.html">https://www.cnblogs.com/dolphin0520/p/3769804.html</a></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>异常处理</tag>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>【SpringCloud入门】Zuul路由配置</title>
    <url>/2021/11/24/SpringCloud(4)/</url>
    <content><![CDATA[<h1 id="一、Zuul是什么？"><a href="#一、Zuul是什么？" class="headerlink" title="一、Zuul是什么？"></a>一、Zuul是什么？</h1><p>Zuul 是 Netflix OSS 中的一员，是一个基于 JVM <strong>路由器</strong>和<strong>服务端的负载均衡器</strong>。提供路由、监控、弹性、安全等方面的服务框架。Zuul 能够与 Eureka、Ribbon、Hystrix 等组件配合使用。</p>
<p>zuul核心功能是<strong>过滤器</strong>、路由、异常处理，通过过滤器还能扩展出其他功能：</p>
<blockquote>
<p>1）动态路由、2）请求监控、3）认证鉴权、4）压力测试、5）灰度发布</p>
</blockquote>
<h1 id="二、Zuul路由配置"><a href="#二、Zuul路由配置" class="headerlink" title="二、Zuul路由配置"></a>二、Zuul路由配置</h1><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><p>在之前的项目上，新建一个springboot项目：zuul-server，继承parent。<br><img src="https://img-blog.csdnimg.cn/a16f66f877d24329b1313ed66fc9f86e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_19,color_FFFFFF,t_70,g_se,x_16"><br>引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Zuul--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里有个问题：</p>
<blockquote>
<p><strong>spring-cloud-starter-netflix-zuul:2.2.x 和Spring Boot 2.5.x之间的Spring 版本冲突</strong><br><strong>Spring Boot 2.4之后不支持zuul(改用Gateway)</strong></p>
</blockquote>
<p>导致项目启动失败，请戳<a href="/2021/11/24/ProblemSolved(1)">解决方法</a></p>
<h2 id="2-路由规则配置"><a href="#2-路由规则配置" class="headerlink" title="2.路由规则配置"></a>2.路由规则配置</h2><p>当 Zuul 集成 Eureka 之后，其实就可以为 Eureka 中所有的服务进行路由操作了，默认的转发规则就是“API 网关地址+访问的服务名称+接口 URI”。</p>
<p>配置文件如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server.port=8088</span><br><span class="line"><span class="comment">#server.servlet.context-path=/zuul-demo</span></span><br><span class="line">spring.application.name=zuul-server</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/</span><br><span class="line"></span><br><span class="line"><span class="comment">#zuul代理配置  zuul.routes.服务名.path,服务名要与注册的一致</span></span><br><span class="line">zuul.routes.client-provider-server.path=/client-provider/**</span><br><span class="line"><span class="comment">#URL映射</span></span><br><span class="line"><span class="comment">#zuul.routes.client-provider-server.url=http://localhost:8081/</span></span><br><span class="line"><span class="comment">#应用名映射</span></span><br><span class="line">zuul.routes.client-provider-server.service-id=client-provider-server</span><br></pre></td></tr></table></figure>
<p>启动类设置@EnableZuulProxy注解，访问代理 <a href="http://localhost:8088/client-provider/api/provider">http://localhost:8088/client-provider/api/provider</a><br><img src="https://img-blog.csdnimg.cn/d91958777b304722972cc7890683f7ab.png"></p>
<h2 id="3-Zuul过滤器介绍及使用"><a href="#3-Zuul过滤器介绍及使用" class="headerlink" title="3.Zuul过滤器介绍及使用"></a>3.Zuul过滤器介绍及使用</h2><p>Zuul 中的过滤器跟我们之前使用的 javax.servlet.Filter 不一样，javax.servlet.Filter 只有一种类型，可以通过配置 urlPatterns 来拦截对应的请求。</p>
<h3 id="过滤器类型"><a href="#过滤器类型" class="headerlink" title="过滤器类型"></a>过滤器类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td>pre</td>
<td>可以在请求被路由之前调用。适用于身份认证的场景，认证通过后再继续执行下面的流程。</td>
</tr>
<tr>
<td>route</td>
<td>在路由请求时被调用。适用于灰度发布场景，在将要路由的时候可以做一些自定义的逻辑。</td>
</tr>
<tr>
<td>error</td>
<td>处理请求时发生错误时被调用。在执行过程中发送错误时会进入 error 过滤器，可以用来统一记录错误信息。</td>
</tr>
<tr>
<td>post</td>
<td>在 route 和 error 过滤器之后被调用。这种过滤器将请求路由到达具体的服务之后执行。适用于需要添加响应头，记录响应日志等应用场景。</td>
</tr>
</tbody></table>
<h3 id="过滤器执行生命周期"><a href="#过滤器执行生命周期" class="headerlink" title="过滤器执行生命周期"></a>过滤器执行生命周期</h3><p><img src="https://img-blog.csdnimg.cn/add9bd0e4b8e466db5210272b16f0451.png" alt=" 过滤器生命周期"><br>通过上面的图可以清楚地知道整个执行的顺序，请求发过来首先到 pre 过滤器，再到 routing 过滤器，最后到 post 过滤器，任何一个过滤器有异常都会进入 error 过滤器。</p>
<h3 id="自定义Zuul过滤器"><a href="#自定义Zuul过滤器" class="headerlink" title="自定义Zuul过滤器"></a>自定义Zuul过滤器</h3><p>如下，代码说明写在注释中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器类型，可选值有 pre、route、post、error。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过int值来定义过滤器的执行顺序</span></span><br><span class="line"><span class="comment">     * 过滤器的执行顺序，数值越小，优先级越高。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否执行该过滤器，true 为执行，false 为不执行</span></span><br><span class="line"><span class="comment">     * 这个也可以利用配置中心来实现，达到动态的开启和关闭过滤器。</span></span><br><span class="line"><span class="comment">     * 配置文件中禁用过滤器：</span></span><br><span class="line"><span class="comment">     * 【zuul.过滤器的类名.过滤器类型.disable=true，如：zuul.MyAccessFilter.pre.disable=true】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器具体逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%s AccessFilter request to %s&quot;</span>, request.getMethod(), request.getRequestURL().toString()));</span><br><span class="line">        String accessToken = request.getParameter(<span class="string">&quot;accessToken&quot;</span>);</span><br><span class="line">        <span class="comment">// 有权限令牌</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(accessToken)) &#123;</span><br><span class="line">         	<span class="comment">// 设置是否路由到服务</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">true</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">200</span>);</span><br><span class="line">            <span class="comment">// 设置下一个过滤器是否执行，当为 true 的时候，后续的过滤器才执行，若为 false 则不执行。</span></span><br><span class="line">            ctx.set(<span class="string">&quot;isSuccess&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            ctx.setResponseBody(<span class="string">&quot;&#123;\&quot;result\&quot;:\&quot;accessToken is not correct!\&quot;&#125;&quot;</span>);</span><br><span class="line">            <span class="comment">//可以设置一些值</span></span><br><span class="line">            ctx.set(<span class="string">&quot;isSuccess&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.local.springboot.zuul.zuulserver.filter.MyAccessFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyAccessFilter <span class="title">myAccessFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyAccessFilter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问：<a href="http://localhost:8088/client-provider/api/provider">http://localhost:8088/client-provider/api/provider</a><br><img src="https://img-blog.csdnimg.cn/cccc4689952b46ba83b5ae74d930717f.png"><br>重新访问：<a href="http://localhost:8088/client-provider/api/provider?accessToken=12358">http://localhost:8088/client-provider/api/provider?accessToken=12358</a><br><img src="https://img-blog.csdnimg.cn/1c8ad6116a3f477f91162efd86abffa4.png"></p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>与<a href="/2021/09/26/SpringBoot(7)">Spring Boot中用 @ControllerAdvice 注解统一异常处理</a>不同，@ControllerAdvice 注解主要用来针对 Controller 中的方法做处理，作用于 @RequestMapping 标注的方法上，只对我们定义的接口异常有效，在 Zuul 中是无效的。</p>
<p>我们可以定义一个 error 过滤器来记录异常信息或者通过实现ErrorController 的方式处理异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(ErrorFilter.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        Throwable throwable = ctx.getThrowable();</span><br><span class="line">        log.error(<span class="string">&quot;Filter Erroe : &#123;&#125;&quot;</span>, throwable.getCause().getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>Zuul 实现动态路由，是因为Zuul 集成的有负载均衡、有负载均衡的效果。详情请戳<a href="/2021/10/28/SpringCloud(3)">SpringCloud入门 —— Ribbon负载均衡</a></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
<a class="btn-beautify button--animated green left larger" href="/2021/10/28/SpringCloud(3)/" 
  title="【SpringCloud入门】Ribbon负载均衡"><i class="far fa-hand-point-left"></i><span>【SpringCloud入门】Ribbon负载均衡</span></a>
<a class="btn-beautify button--animated green right larger" href="/2021/11/29/SpringCloud(5)/" 
  title="【SpringCloud入门】SSO 单点登录"><i class="far fa-hand-point-right"></i><span>【SpringCloud入门】SSO 单点登录</span></a>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java 基础】多线程基础知识点</title>
    <url>/2021/11/15/java-Base-Thread/</url>
    <content><![CDATA[<p>Java 给多线程编程提供了内置的支持。在多线程编程之前，我们需要先了解什么是线程。</p>
<h2 id="进程和多线程简介"><a href="#进程和多线程简介" class="headerlink" title="进程和多线程简介"></a>进程和多线程简介</h2><blockquote>
<p><strong>进程</strong>：进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。<br><strong>线程</strong>：线程与进程相似，但线程是一个比进程更小的执行单位。一条线程是进程中一个单一顺序的控制流<br><strong>多线程</strong>：多线程就是多个线程同时运行或交替运行。</p>
</blockquote>
<p><strong>几个重要概念</strong></p>
<p><code>同步和异步</code>：同步和异步通常用来形容一次方法调用。同步方法调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。异步方法调用更像一个消息传递，一旦开始，方法调用就会立即返回，调用者可以继续后续的操作。</p>
<p><code>并发和并行</code>：它们都可以表示两个或者多个任务一起执行，但是偏重点有些不同。并发偏重于多个任务交替执行，而多个任务之间有可能还是串行的。而并行是真正意义上的“同时执行”。而并行是真正意义上的“同时执行”。</p>
<p><code>高并发</code>：高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行处理很多请求。</p>
<p><code>阻塞和非阻塞</code>：非阻塞指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回，而阻塞与之相反。</p>
<p><code>临界区</code>：临界区用来表示一种公共资源或者说是共享数据，可以被多个线程使用。但是每一次，只能有一个线程使用它，一旦临界区资源被占用，其他线程要想使用这个资源，就必须等待。在并行程序中，临界区资源是保护的对象。</p>
<h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>线程的生命周期就是指线程由创建到死亡的过程。如下图：<br><img src="https://img-blog.csdnimg.cn/052cbb2beccb40beaef3cdc0f25e281b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBALueMq-eahOagkQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>线程在生命周期内的几种状态除了阻塞状态，都比较好理解。那我们就重点看看阻塞状态：</p>
<blockquote>
<p>如果一个线程执行了<strong>sleep（睡眠）</strong>、<strong>suspend（挂起）</strong>等方法，<strong>失去所占用资源</strong>之后，该线程就从运行状态进入<strong>阻塞状态</strong>。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。</p>
</blockquote>
<p>三种阻塞状态：</p>
<ul>
<li><strong>等待阻塞</strong>：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li>
<li><strong>同步阻塞</strong>：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li>
<li><strong>其他阻塞</strong>：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</li>
</ul>
<h2 id="线程的优先级与守护线程"><a href="#线程的优先级与守护线程" class="headerlink" title="线程的优先级与守护线程"></a>线程的优先级与守护线程</h2><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p>
<ol>
<li><strong>线程优先级具有继承特性</strong>，比如A线程启动B线程，则B线程的优先级和A是一样的。</li>
<li><strong>线程优先级具有随机性</strong>，也就是说线程优先级高的不一定每一次都先执行完。</li>
<li>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。<strong>在默认情况下优先级都是Thread.NORM_PRIORITY（常数5）</strong></li>
</ol>
<p><strong>守护线程</strong><br>在Java中有两类线程：User Thread(<strong>用户线程</strong>)、Daemon Thread(<strong>守护线程</strong>) </p>
<blockquote>
<p><strong>用户线程</strong>： 运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程<br><strong>守护线程</strong>： 运行在后台，为其他前台线程服务。也可以说守护线程是JVM中非守护线程的 “佣人保姆”。它的特点是一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作。所以会常应用到数据库连接池中的检测线程，JVM虚拟机启动后的检测线程的场景中。</p>
</blockquote>
<p>那么如何设置守护线程呢？</p>
<p>可以通过调用Thead类的setDaemon(true)方法设置当前的线程为守护线程，最常见的守护线程：<strong>垃圾回收线程</strong></p>
<h2 id="多线程实现的四种方式"><a href="#多线程实现的四种方式" class="headerlink" title="多线程实现的四种方式"></a>多线程实现的四种方式</h2><p>Java 多线程实现方式有四种：</p>
<ol>
<li>继承Thread类，重写run方法</li>
<li>实现Runnable接口，重写run方法，实现Runnable接口的实现类的实例对象作为Thread构造函数的target</li>
<li>通过 Callable 和 FutureTask 创建线程 重写call方法</li>
<li>通过线程池创建线程</li>
</ol>
<p>从上面四种实现方式来看，我们可以将其分为两类：<strong>无返回值和有返回值</strong>。<br>前面两种重写run方法，返回值是void，所以没有办法返回结果；后面两种则有返回值。</p>
<p>具体来看看多线程的四种实现方式：</p>
<h3 id="一、继承Thread类"><a href="#一、继承Thread类" class="headerlink" title="一、继承Thread类"></a>一、继承Thread类</h3><p>Thread类本质上是实现了Runnable接口的一个实例，代表一个线程的实例。<strong>启动线程的唯一方法就是通过Thread类的start()实例方法</strong>。 start()方法是一个native方法，它将启动一个新线程，<strong>并执行run()方法</strong>。这种方式实现多线程很简单，通过自己的类直接extend Thread，并复写run()方法，就可以启动新线程并执行自己定义的run()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 线程执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread();<span class="comment">// 创建一个新的线程thread1 此线程进入新建状态</span></span><br><span class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread1.start(); <span class="comment">// 调用start()方法，使线程进入就绪状态</span></span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、实现Runnable接口"><a href="#二、实现Runnable接口" class="headerlink" title="二、实现Runnable接口"></a>二、实现Runnable接口</h3><p>如果自己的类已经extends另一个类，就无法直接extends Thread，此时，可以实现一个Runnable接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myRunnable = <span class="keyword">new</span> MyThread();<span class="comment">// 创建一个Runnable实现类的对象</span></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myRunnable); <span class="comment">// 将myRunnable作为Thread target创建新的线程</span></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myRunnable);</span><br><span class="line">        thread1.start(); <span class="comment">// 调用start()方法，使线程进入就绪状态</span></span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建Runnable实现类的实例，并以此实例作为Thread类的target来创建Thread对象，该Thread对象才是真正的线程对象。</p>
<h3 id="三、通过-Callable-和-Future-创建线程"><a href="#三、通过-Callable-和-Future-创建线程" class="headerlink" title="三、通过 Callable 和 Future 创建线程"></a>三、通过 Callable 和 Future 创建线程</h3><blockquote>
<p>Java 5.0 在 java.util.concurrent 提供了一个新的创建执行线程的方式： <strong>实现 Callable 接口</strong>。</p>
</blockquote>
<p>具体实现步骤：</p>
<ol>
<li>创建 Callable 接口的实现类，并实现 call() 方法，该 <strong>call() 方法将作为线程执行体</strong>，并且有返回值。</li>
<li> <strong>创建 Callable 实现类的实例</strong>，使用 FutureTask 类来包装 Callable 对象，FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>
<li>使用 <strong>FutureTask 对象作为 Thread 对象的 target</strong> 创建并启动新线程。</li>
<li>调用 FutureTask 对象的 <strong>get()</strong> 方法来获得子线程执行结束后的返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建CallableThread对象</span></span><br><span class="line">        Callable&lt;Integer&gt; myCallable = <span class="keyword">new</span> CallableThread();</span><br><span class="line">        <span class="comment">//使用FutureTask来包装CallableThread对象</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(myCallable);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">30</span>) &#123;</span><br><span class="line">                <span class="comment">// FutureTask对象作为Thread对象的target创建新的线程</span></span><br><span class="line">                Thread thread = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">                thread.start();<span class="comment">// 线程进入到就绪状态</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程for循环执行完毕..&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = ft.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程的返回值:&quot;</span> + sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了。<strong>get方法是阻塞的</strong>，即：线程无返回结果，get方法会一直等待。</p>
<h3 id="四、通过线程池创建线程"><a href="#四、通过线程池创建线程" class="headerlink" title="四、通过线程池创建线程"></a>四、通过线程池创建线程</h3><p>说线程池之前，应该先了解什么是线程池？</p>
<blockquote>
<p><strong>线程池</strong>：Java中开辟出了一种管理线程的概念，这个概念叫做线程。池线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。</p>
</blockquote>
<p><strong>为什么要使用线程池？</strong></p>
<blockquote>
<p><strong>线程池是为了防止内存溢出</strong>，可以方便的管理线程，减少内存的消耗。</p>
</blockquote>
<p>在一个应用程序中，我们需要多次使用线程，也就意味着，我们需要多次创建并销毁线程。而创建并销毁线程的过程势必会消耗内存。所以，我们就提出了线程池的概念。</p>
<p> <strong>线程池的作用：</strong></p>
<blockquote>
<p>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务<br>可以根据系统的承受能力，调整线程池中工作线程的数据，防止因为消耗过多的内存导致服务器崩溃</p>
</blockquote>
<p><strong>线程池类结构</strong><br><img src="https://img-blog.csdnimg.cn/b723f696f4154382bf7b41b5cfddc689.png" alt="线程池类结构"></p>
<ul>
<li>最顶级的接口是Executor，不过Executor严格意义上来说并不是一个线程池而只是提供了一种任务如何运行的机制而已</li>
<li><strong>ExecutorService才可以认为是真正的线程池接口，接口提供了管理线程池的方法</strong></li>
<li>AbstractExecutorService分支就是普通的线程池分支，ScheduledExecutorService是用来创建定时任务的。</li>
</ul>
<p><strong>再介绍Executors类：提供了一系列工厂方法用于创建线程池，返回的线程池都实现了ExecutorService接口。（通过Executors.newXXX方法即可创建。）</strong><br>| 方法 | 描述  |<br>|–|–|<br>| newSingleThreadExecutos() | 单线程线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级列队)执行。 |<br>| newFixedThreadPool(int nThreads) | 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待 |<br>| newCachedThreadPool () | 创建一个可缓存线程池，这种线程池内部没有核心线程，线程的数量是有没限制的。（闲置状态）在超过了60S还不做事，就会销毁 |<br>| newScheduledThreadPool () | 创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。 |</p>
<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建固定大小线程池</span></span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            <span class="comment">// 执行任务并获取Future对象</span></span><br><span class="line">            threadPool.execute(myRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程for循环执行完毕..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通过线程池方式创建的线程：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExecutoreService提供了<strong>submit()<strong>方法，传递一个</strong>Callable</strong>，或<strong>Runnable</strong>，返回<strong>Future</strong>。如果Executor后台线程池还没有完成Callable的计算，这调用返回Future对象的get()方法，会阻塞直到计算完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Callable c = <span class="keyword">new</span> MyCallable();</span><br><span class="line"><span class="comment">// 执行任务并获取Future对象</span></span><br><span class="line">Future f = threadPool.submit(c);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java 基础】带你深入了解 Java 8 新特性</title>
    <url>/2021/11/13/java-Base-java8/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/48dcc2ccec17499daf951ffbd2378da0.jpg"></p>
<p>Java 8 (又称为 jdk 1.8) 是 <strong>Java 语言开发的一个主要版本</strong>。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。（<strong>文章很长，建议点赞收藏</strong>）</p>
<h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><p>以下是Java 8 新增的部分特性，更多新特性了解请详细参考：<a href="https://www.oracle.com/java/technologies/javase/8-whats-new.html">What’s New in JDK 8</a></p>
<p>•  Lambda 表达式<br>•  方法引用<br>•  函数式接口<br>•  默认方法<br>•  Stream<br>•  Optional 类<br>•  Nashorn, JavaScript 引擎<br>•  Date/Time API 新的日期时间 API<br>•  Base64<br>•  新工具 − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</p>
<h2 id="一、Lambda-表达式"><a href="#一、Lambda-表达式" class="headerlink" title="一、Lambda 表达式"></a>一、Lambda 表达式</h2><p>Lambda 表达式（也可称为闭包），它是推动 Java 8 发布的最重要新特性。<br>Lambda 表达式允许把<code>函数作为一个方法的参数</code>，可以取代大部分的<strong>匿名内部类</strong>，写出更优雅的 Java 代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>
<h3 id="什么是-Lambda-表达式"><a href="#什么是-Lambda-表达式" class="headerlink" title="什么是 Lambda 表达式"></a>什么是 Lambda 表达式</h3><p>先来看看 Lambda 表达式的<a href="https://baike.baidu.com/item/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/4585794?fr=aladdin">官方解释</a>：<br>Lambda 表达式（lambda expression）是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象（lambda abstraction），是一个<code>匿名函数</code>，即没有函数名的函数。</p>
<p>这样的解释还是让人摸不着头脑，那我们接着往下看。</p>
<p>首先介绍， Lambda 表达式的<strong>语法格式</strong>：<code>() -&gt; &#123;&#125;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">其中 () 用来描述参数列表，&#123;&#125; 用来描述方法体，-&gt; 为 lambda运算符 ，读作(goes to)。</span><br><span class="line">简单例子：</span><br><span class="line">(int x, int y) -&gt; x + y  <span class="comment">//接收2个int型整数,返回他们的和</span></span><br><span class="line">(<span class="built_in">String</span> s) -&gt; System.out.print(s) <span class="comment">// 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void) </span></span><br></pre></td></tr></table></figure>
<p>前面我们说了 Lambda 表达式可以取代大部分的匿名内部类，举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NoReturnMultiParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 匿名类实现NoReturnMultiParam接口</span></span><br><span class="line">        NoReturnMultiParam noReturnMultiParam = <span class="keyword">new</span> NoReturnMultiParam() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;param:&#123;a=&quot;</span> + a + <span class="string">&quot;,b=&quot;</span> + b + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 调用接口</span></span><br><span class="line">        noReturnMultiParam.method(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：<code>param:&#123;a=1,b=2&#125;</code></p>
<p>接着，我们将匿名类实现替换为 Lambda表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Lambda实现NoReturnMultiParam接口</span></span><br><span class="line">        NoReturnMultiParam lambda = (a, b) -&gt; System.out.println(<span class="string">&quot;param:&#123;a=&quot;</span> + a + <span class="string">&quot;,b=&quot;</span> + b + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用接口</span></span><br><span class="line">        lambda.method(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果与之前相同，可以看到，Lambda 表达式可以来定义<strong>行内执行的方法类型接口</strong>，免去了使用匿名方法的麻烦。<br>简单来说，在 Java 中可以将 Lambda 表达式看成一个<strong>接口的实现</strong>，但并不是所有的接口都可以使用 Lambda 表达式来实现。</p>
<p>Lambda 规定接口中只能有<strong>一个需要被实现的方法</strong>，即<code>函数式接口</code>，不是规定接口中只能有一个方法。</p>
<h3 id="闭包问题"><a href="#闭包问题" class="headerlink" title="闭包问题"></a>闭包问题</h3><p>lambda 表达式只能引用标记了 <code>final</code> 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">        NoReturnMultiParam lambda = (a, b) -&gt; System.out.println(<span class="string">&quot;param:&#123;a=&quot;</span> + a + <span class="string">&quot;,b=&quot;</span> + b + <span class="string">&quot;&#125;,c=&quot;</span>+c);</span><br><span class="line">        lambda.method(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里c没有标识为<code>final</code>，但是没有被后续代码修改，所以在编译期间虚拟机会帮我们加上 final 修饰关键字（即隐性的具有 final 的语义）</p>
<p>修改代码，出现错误<code>java: 从lambda 表达式引用的本地变量必须是最终变量或实际上的最终变量</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">        NoReturnMultiParam lambda = (a, b) -&gt; System.out.println(<span class="string">&quot;param:&#123;a=&quot;</span> + a + <span class="string">&quot;,b=&quot;</span> + b + <span class="string">&quot;&#125;,c=&quot;</span>+c);</span><br><span class="line">        c = c + <span class="number">2</span>;</span><br><span class="line">        lambda.method(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、方法引用"><a href="#二、方法引用" class="headerlink" title="二、方法引用"></a>二、方法引用</h2><p><strong>方法引用通过方法的名字来指向一个方法</strong>，在使用 Lambda 表达式时，有时候我们不是必须要自己重写某个匿名内部类的方法，而是可以利用 Lambda 表达式的接口快速指向一个已经被实现的方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">语法：​ 方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象</span><br></pre></td></tr></table></figure>
<p> Java 中 4 种不同方法的引用：<br> •  <strong>构造器引用 ClassName::new</strong><br> •  <strong>静态方法引用  Class::static_method</strong><br> •  <strong>特定类的任意对象的方法引用 Class::method</strong><br> •  <strong>特定对象的方法引用 instance::method</strong></p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.local.springboot.springbootservice.sysuser;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InstanceCreate</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ReturnMultiParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteNum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ReturnMultiParam lambda = (a, b) -&gt; addNum(a, b);</span><br><span class="line">        System.out.println(lambda.method(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造器引用</span></span><br><span class="line">        InstanceCreate create = Test::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(create.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法引用</span></span><br><span class="line">        ReturnMultiParam result = Test::addNum;</span><br><span class="line">        System.out.println(result.method(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 特定对象的方法引用</span></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        ReturnMultiParam result2 = test::deleteNum;</span><br><span class="line">        System.out.println(result2.method(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">com.local.springboot.springbootservice.sysuser.Test@179d3b25</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="三、函数式接口"><a href="#三、函数式接口" class="headerlink" title="三、函数式接口"></a>三、函数式接口</h2><p>上面提到<strong>接口中只有一个需要被实现的方法</strong>的接口，叫做<strong>函数式接口</strong>。</p>
<p>函数式接口需要用<code>@FunctionalInterface</code>注解修饰，要求接口中的<strong>抽象方法只有一个，但可以有多个非抽象方法</strong>。</p>
<h3 id="函数式接口实例"><a href="#函数式接口实例" class="headerlink" title="函数式接口实例"></a>函数式接口实例</h3><p>函数式接口可以对现有的函数友好地支持 lambda。比如常用的<code>Comparator</code>或者<code>Consumer </code>接口。</p>
<p>比如常见的<strong>集合内元素的排序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Cat&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> Cat(<span class="number">5</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Cat(<span class="number">2</span>,<span class="string">&quot;Aimi&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Cat(<span class="number">3</span>,<span class="string">&quot;Doe&quot;</span>));</span><br><span class="line"></span><br><span class="line">list.sort(<span class="keyword">new</span> Comparator&lt;Cat&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cat o1, Cat o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getIndex()- o2.getIndex();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">list.forEach(item -&gt; &#123;</span><br><span class="line">    System.out.println(item.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.sort((o1,o2)-&gt;o1.getIndex()-o2.getIndex());</span><br><span class="line"><span class="comment">//list.sort((Comparator.comparing(Cat::getIndex)));</span></span><br><span class="line">list.forEach(item -&gt; &#123;</span><br><span class="line">    System.out.println(item.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="更多函数式接口"><a href="#更多函数式接口" class="headerlink" title="更多函数式接口"></a>更多函数式接口</h3><h4 id="JDK-1-8-之前已有的函数式接口"><a href="#JDK-1-8-之前已有的函数式接口" class="headerlink" title="JDK 1.8 之前已有的函数式接口:"></a>JDK 1.8 之前已有的函数式接口:</h4><p>• <code>java.lang.Runnable</code><br>• <code>java.util.concurrent.Callable</code><br>• <code>java.security.PrivilegedAction</code><br>• <code>java.util.Comparator</code><br>• <code>java.io.FileFilter</code><br>• <code>java.nio.file.PathMatcher</code><br>• <code>java.lang.reflect.InvocationHandler</code><br>• <code>java.beans.PropertyChangeListener</code><br>• <code>java.awt.event.ActionListener</code><br>• <code>javax.swing.event.ChangeListener</code></p>
<h4 id="JDK-1-8-新增加的函数接口："><a href="#JDK-1-8-新增加的函数接口：" class="headerlink" title="JDK 1.8 新增加的函数接口："></a>JDK 1.8 新增加的函数接口：</h4><p>• <code>java.util.function</code><br>java.util.function 它包含了很多类，用来支持 Java的 函数式编程，详细的函数式接口请查看源码。</p>
<h2 id="四、默认方法"><a href="#四、默认方法" class="headerlink" title="四、默认方法"></a>四、默认方法</h2><p>简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。<br>用法：只需在方法名前面加个 <code>default</code> 关键字即可<strong>实现默认方法</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用</span><br></pre></td></tr></table></figure>
<h3 id="相同的默认方法"><a href="#相同的默认方法" class="headerlink" title="相同的默认方法"></a>相同的默认方法</h3><p>当一个类实现多个接口，而且这些接口存在相同的默认方法，会发生什么情况呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口1默认方法实现!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口2默认方法实现!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceImpl</span> <span class="keyword">implements</span> <span class="title">Interface1</span>, <span class="title">Interface2</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 可以使用 super 来调用指定接口的默认方法</span></span><br><span class="line">    	<span class="comment">// Interface1.super.print();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口实现类!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InterfaceImpl interfaceImpl = <span class="keyword">new</span> InterfaceImpl();</span><br><span class="line">        interfaceImpl.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">我是接口实现类!</span><br></pre></td></tr></table></figure>
<p>当出现这种接口冲突，一般有两种解决方案 <code>覆盖重写接口的默认方法</code>、<code>使用 super 来调用指定接口的默认方法</code> </p>
<h3 id="静态默认方法"><a href="#静态默认方法" class="headerlink" title="静态默认方法"></a>静态默认方法</h3><p>Java 8 中接口是可以声明<strong>静态方法</strong>（并且可以提供实现）的。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口2默认方法实现!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 静态方法</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;我是接口2中的静态方法&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="为什么要有这个特性"><a href="#为什么要有这个特性" class="headerlink" title="为什么要有这个特性"></a>为什么要有这个特性</h3><p>说了这么多，那么问题来了，为什么要新增这个特性？</p>
<blockquote>
<p><em>新增默认方法是为了<strong>解决接口的修改与现有的实现不兼容的问题</strong>。<br>我们都知道接口是面向抽象而不是面向具体编程的，所以当需要修改接口时，就需要修改全部实现改接口的类。<br>所以对于以前发布的版本，是做不到在修改接口的同时不影响已有的实现。</em></p>
</blockquote>
<h2 id="五、Stream"><a href="#五、Stream" class="headerlink" title="五、Stream"></a>五、Stream</h2><p>Java 8 API 添加了一个新的抽象称为<strong>流 Stream</strong>，可以让你以一种<code>声明的方式</code>处理数据。</p>
<p><a href="https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E7%B3%96/5247005?fr=aladdin">语法糖</a> Stream 以一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 <code>Java 集合运算和表达的高阶抽象</code>。简单来说流是Java 8 中对Collection对象功能的加强。</p>
<h3 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h3><blockquote>
<p>【数据集合】 -&gt;【数据源】 - &gt; 【转换（聚合）操作】 -&gt;【终点操作】</p>
</blockquote>
<p>• Intermediate（转换操作）：中间操作都会返回流对象本身。就是说，仅仅调用到这类方法，并没有真正开始流的遍历。多次的转换操作只会在遇到终点操作之后，才会依次执行。</p>
<blockquote>
<p>转换操作：map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel…</p>
</blockquote>
<p>• Terminal（终点操作）：一个流只能有一个 terminal 操作，<strong>当这个操作执行后，流就被使用“光”了，无法再被操作</strong>。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</p>
<blockquote>
<p>终点操作：forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny…</p>
</blockquote>
<p>• Short-Circuiting（短路操作）：短路操作其实和终点操作也是一样的，<strong>可能不再返回一个流，或是返回一个被截取过的流</strong>。比如anyMatch方法，通过Predicate<T>接口返回了一个真值。由于流Stream在理论上是无限大的，<strong>短路操作被用以对流进行截取，把无限的变成有限的流</strong>，比如limit方法，可以限制获取数据源的数量。</p>
<blockquote>
<p>短路操作：anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit…</p>
</blockquote>
<h4 id="外部迭代与内部迭代"><a href="#外部迭代与内部迭代" class="headerlink" title="外部迭代与内部迭代"></a>外部迭代与内部迭代</h4><p>这里值得一提的是以前对集合遍历都是通过<strong>Iterator</strong>或者<strong>for-each</strong>的方式，显式的在集合外部进行迭代， 这叫做<code>外部迭代</code>。与以前的Collection操作不同，流操作提供了<code>内部迭代</code>的方式， 通过<strong>访问者模式(Visitor)实现</strong>。</p>
<p>那什么是外部迭代和内部迭代呢？举个简单的列子：</p>
<p>比如你请人打扫房间，但有觉得不放心，于是你觉得现场指示工人先擦桌子，再拖地，最后洗碗…直到打扫完毕，这就是所谓的<strong>外部迭代</strong>，即显示地取出元素进行处理。<br>后来你和清洁工人熟悉之后，你只需要和她说把房间打扫干净，清洁工人自己选择先做什么，再做什么，你等着接收成果就行了。这就是<strong>内部迭代</strong>。</p>
<h4 id="生成流"><a href="#生成流" class="headerlink" title="生成流"></a>生成流</h4><p>顶层集合类Collection添加了两个方法：<code>stream()</code>、<code>parallelStream()</code>。<br>• stream() − 为集合创建串行流。<br>• parallelStream() − 为集合创建并行流。</p>
<p>开启流计算时根据操作的数据量选择调用stream()或者parallelStream()</p>
<h4 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h4><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><p>Stream 提供了新的方法 ‘forEach’ 来迭代流中的每个数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abd&quot;</span>,<span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">strings.forEach(System.out::println); </span><br></pre></td></tr></table></figure>
<h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>map 方法用于映射每个元素到对应的结，以下代码片段使用 map 输出了元素对应的大写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abd&quot;</span>,<span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">strings.stream().map(String::toUpperCase).sorted((a, b) -&gt; b.compareTo(a)).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>filter 方法用于通过设置的条件过滤出元素。把除了<code>abc</code>的字符串过滤出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abd&quot;</span>,<span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">strings.stream().filter(string -&gt; !<span class="string">&quot;abc&quot;</span>.equals(string)).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>limit 方法用于获取指定数量的流。 打印3条数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abd&quot;</span>,<span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">strings.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h4 id="流操作简单说明"><a href="#流操作简单说明" class="headerlink" title="流操作简单说明"></a>流操作简单说明</h4><p>• <code>filter</code>：用于过滤出满足条件的元素<br>• <code>distinct</code>：去重，需要重写equals（）和hashCode（）<br>• <code>sorted</code>：对元素进行排序<br>• <code>limit</code>：返回前n个元素<br>• <code>skip</code>：去掉前n个元素<br>• <code>map</code>：方法用于映射每个元素对应的结果<br>• <code>flapMap</code>：将流中的每一个元素T映射成为一个流，再把每一个流连接成一个流<br>• <code>anyMatch</code>：是否存在任意一个元素满足条件（返回布尔值）<br>• <code>allMatch</code>：是否所有元素都满足条件（返回布尔值）<br>• <code>noneMatch</code>：是否所有元素都不满足条件（返回布尔值）<br>• <code>findAny</code>：找到其中一个元素 （使用 stream() 时找到的是第一个元素；使用 parallelStream() 并行时找到的是其中一个元素）<br>• <code>findFirst</code>：找到第一个元素<br>• <code>reduce</code>：用于组合流中的元素，如求和，求积，求最大值等<br>• <code>count</code>：返回流中元素个数，结果为 long 类型<br>• <code>collect</code>：收集方法，我们很常用的是 collect(toList())，当然还有 collect(toSet()) 等，参数是一个收集器接口</p>
<h3 id="Stream流式计算的使用"><a href="#Stream流式计算的使用" class="headerlink" title="Stream流式计算的使用"></a>Stream流式计算的使用</h3><p>说了这么多，那么流使用好处以及对性能的影响如何呢？</p>
<p>Stream API 可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p>
<p>通过实际示例对比了常规的集合类的过滤、封装、统计操作，几百的小数据量操作，常规外部迭代更快；数据量再大一点，stream()串行的流式计算会更快；上万级别的数据量后，parallelStream()并行流式计算会更快。</p>
<h2 id="六、Optional-类"><a href="#六、Optional-类" class="headerlink" title="六、Optional 类"></a>六、Optional 类</h2><p>相信大家在编码中最常遇见的就是空指针异常，而Optional 类的引入就是为了很好地解决空指针异常。</p>
<p><code>Optional</code> 是个<strong>容器</strong>：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就<strong>不用显式进行空值检测</strong>。</p>
<h3 id="常用类方法"><a href="#常用类方法" class="headerlink" title="常用类方法"></a>常用类方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>T get()</td>
<td>如果在这个Optional中包含这个值，返回值，否则抛出异常：NoSuchElementException</td>
</tr>
<tr>
<td>void ifPresent(Consumer&lt;? super T&gt; consumer)</td>
<td>如果值存在则使用该值调用 consumer , 否则不做任何事情。</td>
</tr>
<tr>
<td>boolean isPresent()</td>
<td>如果值存在则方法会返回true，否则返回 false。</td>
</tr>
<tr>
<td><U>Optional<U> map(Function&lt;? super T,? extends U&gt; mapper)</td>
<td>如果有值，则对其执行调用映射函数得到返回值。如果返回值不为 null，则创建包含映射返回值的Optional作为map方法返回值，否则返回空Optional。</td>
</tr>
<tr>
<td>T orElse(T other)</td>
<td>如果存在该值，返回值， 否则返回 other。</td>
</tr>
<tr>
<td>T orElseGet(Supplier&lt;? extends T&gt; other)</td>
<td>如果存在该值，返回值， 否则触发 other，并返回 other 调用的结果。</td>
</tr>
</tbody></table>
<h3 id="简单举例"><a href="#简单举例" class="headerlink" title="简单举例"></a>简单举例</h3><p><code>orElse</code> 存在则返回<code>aa</code>，不存在则返回<code>bb</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; string= Optional.of(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">string.orElse(<span class="string">&quot;bb&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="七、日期时间-API"><a href="#七、日期时间-API" class="headerlink" title="七、日期时间 API"></a>七、日期时间 API</h2><p>旧版日期时间API问题：<br>• <code>非线程安全</code>： java.util.Date 是非线程安全的，所有的日期类都是可变的，这是Java日期类最大的问题之一。<br>• <code>日期/时间类的定义并不一致</code>：在java.util和java.sql的包中都有日期类<br>• <code>时区处理麻烦</code>：日期类并不提供国际化，没有时区支持</p>
<p>Java 8 在 <code>java.time</code> 包下提供了很多新的 API：<br>• <code>Local(本地)</code>：简化了日期时间的处理，没有时区的问题。<br>• <code>Zoned(时区</code>：通过制定的时区处理日期时间。</p>
<p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p>
<h3 id="使用时区的日期时间API"><a href="#使用时区的日期时间API" class="headerlink" title="使用时区的日期时间API"></a>使用时区的日期时间API</h3><p>时区使用 <code>ZoneId</code> 来表示，使用静态方法<code>of</code>来获取时区</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 获取当前时间日期</span></span><br><span class="line">ZonedDateTime date = ZonedDateTime.parse(<span class="string">&quot;2021-11-13T10:15:30+05:30[Asia/Shanghai]&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;date: &quot;</span> + date);</span><br><span class="line">        </span><br><span class="line">ZoneId id = ZoneId.of(<span class="string">&quot;Europe/Paris&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;ZoneId: &quot;</span> + id);</span><br><span class="line">        </span><br><span class="line">ZoneId currentZone = ZoneId.systemDefault();</span><br><span class="line">System.out.println(<span class="string">&quot;当期时区: &quot;</span> + currentZone);</span><br></pre></td></tr></table></figure>
<h3 id="本地化日期时间API"><a href="#本地化日期时间API" class="headerlink" title="本地化日期时间API"></a>本地化日期时间API</h3><p>LocalDate、LocalTime 、LocalDateTime 都是用于处理日期时间的 API，在处理日期时间时可以不用强制性指定时区</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前的日期时间</span></span><br><span class="line">LocalDateTime currentTime = LocalDateTime.now();</span><br><span class="line">System.out.println(<span class="string">&quot;当前时间: &quot;</span> + currentTime);<span class="comment">//当前时间: 2016-04-15T16:55:48.668</span></span><br><span class="line">  </span><br><span class="line">LocalDate date1 = currentTime.toLocalDate();</span><br><span class="line">System.out.println(<span class="string">&quot;date1: &quot;</span> + date1);<span class="comment">//date1: 2016-04-15</span></span><br><span class="line">  </span><br><span class="line">Month month = currentTime.getMonth();</span><br><span class="line"><span class="keyword">int</span> day = currentTime.getDayOfMonth();</span><br><span class="line"><span class="keyword">int</span> seconds = currentTime.getSecond();</span><br><span class="line">  </span><br><span class="line">System.out.println(<span class="string">&quot;月: &quot;</span> + month +<span class="string">&quot;, 日: &quot;</span> + day +<span class="string">&quot;, 秒: &quot;</span> + seconds);<span class="comment">//月: APRIL, 日: 15, 秒: 48</span></span><br><span class="line">  </span><br><span class="line">LocalDateTime date2 = currentTime.withDayOfMonth(<span class="number">10</span>).withYear(<span class="number">2012</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;date2: &quot;</span> + date2);<span class="comment">//date2: 2012-04-10T16:55:48.668</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 12 december 2014</span></span><br><span class="line">LocalDate date3 = LocalDate.of(<span class="number">2014</span>, Month.DECEMBER, <span class="number">12</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;date3: &quot;</span> + date3);<span class="comment">//date3: 2014-12-12</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 22 小时 15 分钟</span></span><br><span class="line">LocalTime date4 = LocalTime.of(<span class="number">22</span>, <span class="number">15</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;date4: &quot;</span> + date4);<span class="comment">//date4: 22:15</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 解析字符串</span></span><br><span class="line">LocalTime date5 = LocalTime.parse(<span class="string">&quot;20:15:30&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;date5: &quot;</span> + date5);<span class="comment">//date5: 20:15:30</span></span><br></pre></td></tr></table></figure>
<p>自定义格式使用<code>DateTimeFormatter</code>，它是不可变的（<strong>线程安全</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime currentTime = LocalDateTime.now();</span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);</span><br><span class="line">System.out.println(formatter.format(currentTime));<span class="comment">// 2021-11-13 10:34:55.731</span></span><br></pre></td></tr></table></figure>
<h2 id="八、Base64"><a href="#八、Base64" class="headerlink" title="八、Base64"></a>八、Base64</h2><p>在Java 8中，Base64编码已经成为Java类库的标准。<br>至于它的使用则十分简单，来看个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编码</span></span><br><span class="line">String base64encodedString = Base64.getEncoder().encodeToString(<span class="string">&quot;Java8-Base64&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">System.out.println(base64encodedString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码</span></span><br><span class="line">String base64decodedString = <span class="keyword">new</span> String(Base64.getDecoder().decode(base64encodedString), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">System.out.println(base64decodedString);</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<blockquote>
<p>SmF2YTgtQmFzZTY0<br>Java8-Base64</p>
</blockquote>
<p>此外，Base64工具类还提供了URL、MIME编解码器<br>| 方法 | 描述 |<br>|–|–|<br>|  static Base64.Decoder getMimeDecoder()| 返回一个 Base64.Decoder ，解码使用 MIME 型 base64 编码方案。 |<br>|  static Base64.Encoder getMimeEncoder()| 返回一个 Base64.Encoder ，编码使用 MIME 型 base64 编码方案。 |<br>|      static Base64.Decoder getUrlDecoder()|  返回一个 Base64.Decoder ，解码使用 URL 和文件名安全型 base64 编码方案。 |<br>| static Base64.Encoder getUrlEncoder()| 返回一个 Base64.Encoder ，编码使用 URL 和文件名安全型 base64 编码方案。 |</p>
<h2 id="九、Nashorn-JavaScript引擎"><a href="#九、Nashorn-JavaScript引擎" class="headerlink" title="九、Nashorn JavaScript引擎"></a>九、Nashorn JavaScript引擎</h2><p>Nashorn 是一个 <strong>javascript 引擎</strong>，使得JavaScript 代码可以在 Java 中执行，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ScriptEngineManager scriptEngineManager = <span class="keyword">new</span> ScriptEngineManager();</span><br><span class="line">ScriptEngine nashorn = scriptEngineManager.getEngineByName(<span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line">System.out.println(engine.eval(<span class="string">&quot;function f()&#123;return 10;&#125;; f() + 1;&quot;</span>));<span class="comment">//12</span></span><br></pre></td></tr></table></figure>
<h3 id="jjs"><a href="#jjs" class="headerlink" title="jjs"></a>jjs</h3><p>jjs是个基于Nashorn引擎的命令行工具。它接受一些JavaScript源代码为参数，并且执行这些源代码。</p>
<p>使用Nashorn运行脚本的示例</p>
<blockquote>
<p>jjs script.js</p>
</blockquote>
<p>在交互模式下运行Nashorn的示例</p>
<blockquote>
<p>jjs<br>jjs&gt; println(“Hello, World!”)<br>Hello, World!<br>jjs&gt; quit()</p>
</blockquote>
<p>将参数传递给Nashorn的示例</p>
<blockquote>
<p>$ jjs – a b c<br>jjs&gt; arguments.join(“, “)<br>a, b, c<br>jjs&gt;</p>
</blockquote>
<p><strong>值得注意的是：</strong></p>
<blockquote>
<p><em>随着ECMAScript语言标准的快速发展，维护Nashorn引擎变得越发挑战，因此该引擎将在Java中废弃。Java11将声明弃用Nashorn JavaScript脚本引擎，被标注为<code>@Deprecated(forRemoval=true)</code>。</em></p>
</blockquote>
<h2 id="十、类依赖分析器jdeps"><a href="#十、类依赖分析器jdeps" class="headerlink" title="十、类依赖分析器jdeps"></a>十、类依赖分析器jdeps</h2><p>jdeps是一个相当棒的命令行工具，它可以展示包层级和类层级的Java类依赖关系，它以.class文件、目录或者Jar文件为输入，然后会把依赖关系输出到控制台。</p>
<p>我们可以利用jedps分析下<code>org.springframework.core-3.0.5.RELEASE.jar</code> ，这个命令会输出很多结果，我们仅看下其中的一部分：依赖关系按照包分组，如果在classpath上找不到依赖，则显示not found。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">org.springframework.core<span class="number">-3.0</span><span class="number">.5</span>.RELEASE.jar -&gt; C:\Program Files\Java\jdk1<span class="number">.8</span><span class="number">.0</span>\jre\lib\rt.jar</span><br><span class="line">   org.springframework.core (org.springframework.core<span class="number">-3.0</span><span class="number">.5</span>.RELEASE.jar)</span><br><span class="line">      -&gt; java.io                                            </span><br><span class="line">      -&gt; java.lang                                          </span><br><span class="line">      -&gt; java.lang.annotation                               </span><br><span class="line">      -&gt; java.lang.ref                                      </span><br><span class="line">      -&gt; java.lang.reflect                                  </span><br><span class="line">      -&gt; java.util                                          </span><br><span class="line">      -&gt; java.util.concurrent                               </span><br><span class="line">      -&gt; org.apache.commons.logging                         <span class="keyword">not</span> found</span><br><span class="line">      -&gt; org.springframework.<span class="keyword">asm</span>                            <span class="keyword">not</span> found</span><br><span class="line">      -&gt; org.springframework.<span class="keyword">asm</span>.commons                    <span class="keyword">not</span> found</span><br><span class="line">   org.springframework.core.annotation (org.springframework.core<span class="number">-3.0</span><span class="number">.5</span>.RELEASE.jar)</span><br><span class="line">      -&gt; java.lang                                          </span><br><span class="line">      -&gt; java.lang.annotation                               </span><br><span class="line">      -&gt; java.lang.reflect                                  </span><br><span class="line">      -&gt; java.util</span><br></pre></td></tr></table></figure>
<p>参考资料：<br><a href="https://www.cnblogs.com/haixiang/p/11029639.html">Lambda表达式详解</a><br><a href="https://blog.csdn.net/tieselingzhi/article/details/52815912?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4.no_search_link">Java8 新特性之八———类依赖分析器：jdeps</a></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>新特性</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务task:annotation-driven配置</title>
    <url>/2021/05/27/task/</url>
    <content><![CDATA[<p>讲这个之前，我们先讲讲定时器。<br>从实现技术上来看，定时器分为三种：</p>
<p>1.Timer比较单一，这个类允许你调度一个java.util.TimerTask任务。使用这种方式可以让你的程序按照某一个频度执行，但不能在指定时间运行，一般用的较少。<br>2.Quartz是一个功能比较强大的的调度器，可以让你的程序在指定时间执行，也可以按照某一个频度执行，配置起来有些复杂。<br>3.Spring3.0以后自带的task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多。</p>
<p>从作业类继承分类主要分为两类：</p>
<p>1.作业类需要继承自特定的作业类基类，如Quartz中需要继承自org.springframework.scheduling.quartz.QuartzJobBean；java.util.Timer中需要继承自java.util.TimerTask。<br>2.作业类即普通的java类，不需要继承自任何基类。</p>
<p>从任务调度的触发机制来分，主要有以下两种：</p>
<p>1.每隔指定时间则触发一次，在Quartz中对应的触发器为：org.springframework.scheduling.quartz.SimpleTriggerBean<br>2.每到指定时间则触发一次，在Quartz中对应的调度器为：org.springframework.scheduling.quartz.CronTriggerBean</p>
<p>现在，我们讲讲Spring3.0的task，<a href="task:annotation-driven/">task:annotation-driven/</a>的作用就是开启定时器开关，自动扫描程序中带注解的定时器，不过，要让他起作用还需要以下配置：</p>
<p>首先在配置文件头部的必须要有：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</span><br></pre></td></tr></table></figure>


<p>其次xsi:schemaLocation必须为其添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xsi:schemaLocation=&quot; http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd&quot;</span><br></pre></td></tr></table></figure>


<p>然后spring扫描过程必须涵盖定时任务类所在的目录：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.task.service&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>com.task.service属于定时任务类的父级甚至更高级 ,然后设置动作启用定时任务:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后一步，设置任务类，添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/5 * * * * ?&quot;)</span><span class="comment">//每隔5秒执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sms msg has working！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0 0 1 * * ?&quot;)//每天凌晨1点整</span></span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0 30 0 * * ?&quot;)//每天凌晨0点30分</span></span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0 */60 * * * ?&quot;)//1小时处理一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，重点说一下四种定时器机制注解:</p>
<p>1.@Scheduled(cron = “0 10 * * * ?”)<br>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式：<br>Seconds Minutes Hours DayofMonth Month DayofWeek Year或<br>Seconds Minutes Hours DayofMonth Month DayofWeek</p>
<p>每一个域可出现的字符如下：<br>Seconds:可出现”, - * /”四个字符，有效范围为0-59的整数<br>Minutes:可出现”, - * /”四个字符，有效范围为0-59的整数<br>Hours:可出现”, - * /”四个字符，有效范围为0-23的整数<br>DayofMonth:可出现”, - * / ? L W C”八个字符，有效范围为0-31的整数<br>Month:可出现”, - * /”四个字符，有效范围为1-12的整数或JAN-DEc<br>DayofWeek:可出现”, - * / ? L C #”四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推<br>Year:可出现”, - * /”四个字符，有效范围为1970-2099年</p>
<p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：<br>(1)：表示匹配该域的任意值，假如在Minutes域使用, 即表示每分钟都会触发事件。</p>
<p>(2)?:只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和 DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用，如果使用表示不管星期几都会触发，实际上并不是这样。</p>
<p>(3)-:表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次</p>
<p>(4)/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次.</p>
<p>(5),:表示列出枚举值值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。</p>
<p>(6)L:表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。</p>
<p>(7)W: 表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一 到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份</p>
<p>(8)LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</p>
<p>(9)#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</p>
<p>2.@Scheduled(fixedDelay = 10000)<br>fixedDelay 的执行规则是上一个任务结束后到下个任务开始的间隔时间为设定时间，单位是毫秒（例：@Scheduled(fixedDelay = 10000)代表间隔10秒执行一次）</p>
<p>3.@Scheduled(fixedRate= 10000)<br>fixedRate表示上个任务开始到下个任务开始之间的间隔时间，单位也是毫秒。</p>
<p>4.@Scheduled(initialDelay= 10000)<br>这个代表第一次运行前延迟一段时间后执行，单位也是毫秒</p>
<p><a href="https://link.csdn.net/?target=https://www.cnblogs.com/myibm/p/7068590.html">看不懂可以参考图片资料</a></p>
<p>当定时任务比较多的时候，我们还可以添加以下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置任务线性池 --&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 任务执行器线程数量 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">&quot;executor&quot;</span> <span class="attr">pool-size</span>=<span class="string">&quot;3&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 任务调度器线程数量 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">&quot;scheduler&quot;</span> <span class="attr">pool-size</span>=<span class="string">&quot;3&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 启用annotation方式 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">scheduler</span>=<span class="string">&quot;scheduler&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">executor</span>=<span class="string">&quot;executor&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>当使用项目集群的时候，注解就要不要用了，改成xml配置方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">task:scheduled-tasks</span> <span class="attr">scheduler</span>=<span class="string">&quot;scheduler&quot;</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- xml配置定时器，ref是定时器所在类名，method是定时器方法名 --!&gt; </span></span><br><span class="line"><span class="comment">&lt;task:scheduled ref=&quot;reminderProcessor&quot; method=&quot;process&quot;  </span></span><br><span class="line"><span class="comment">cron=&quot;0 0 12 * * ?&quot; /&gt;  </span></span><br><span class="line"><span class="comment">&lt;/task:scheduled-tasks&gt; </span></span><br></pre></td></tr></table></figure>

<p>from：<a href="https://blog.csdn.net/qq_37061442/article/details/78689053?locationNum=7&fps=1">https://blog.csdn.net/qq_37061442/article/details/78689053?locationNum=7&amp;fps=1</a></p>
<blockquote>
<p>创作不易，关注、点赞就是对作者最大的鼓励，欢迎在下方留言<br>简书ID: <a href="https://www.jianshu.com/u/55873abb82cb">猫的树</a><br>CSDN: <a href="https://blog.csdn.net/qq_34383510?spm=1001.2014.3001.5343">.猫的树</a><br>欢迎关注<strong>微信公众号</strong>：<strong>键指JAVA</strong>，定期分享Java知识，<strong>一起学习，共同成长</strong>。</p>
</blockquote>
]]></content>
      <categories>
        <category>定时任务task</category>
      </categories>
      <tags>
        <tag>task</tag>
      </tags>
  </entry>
</search>
